[
  {
    "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`": [
      0,
      31
    ]
  },
  {
    "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`": [
      1,
      12,
      34
    ]
  },
  {
    "Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm": [
      2
    ]
  },
  {
    "Charter schools refers to `Charter School (Y/N)` = 1 in the frpm": [
      4
    ]
  },
  {
    "Exclusively virtual refers to Virtual = 'F'": [
      5,
      41
    ]
  },
  {
    "Magnet schools or offer a magnet program means that Magnet = 1": [
      6
    ]
  },
  {
    "Total enrollment can be represented by `Enrollment (K-12)` + `Enrollment (Ages 5-17)`": [
      11
    ]
  },
  {
    "Excellence rate = NumGE1500 / NumTstTakr": [
      12,
      13
    ]
  },
  {
    "Valid charter number means the number is not null": [
      17
    ]
  },
  {
    "Diffrence in enrollement = `Enrollment (K-12)` - `Enrollment (Ages 5-17)`": [
      23
    ]
  },
  {
    "Percent eligible for free meals = Free Meal Count (K-12) / Total (Enrollment (K-12)": [
      24
    ]
  },
  {
    "Average of average math = sum(average math scores) / count(schools).": [
      25
    ]
  },
  {
    "Full communication address should include Street, City, State and zip code if any.": [
      26
    ]
  },
  {
    "Communication number refers to phone number.": [
      27
    ]
  },
  {
    "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`": [
      28
    ]
  },
  {
    "K-12 means First-through-twelfth-grade": [
      29
    ]
  },
  {
    "K-12 refers to students in grades 1 through 12.": [
      30
    ]
  },
  {
    "K-12 refers to students in grades 1 through 12": [
      31
    ]
  },
  {
    "grades 1-12 means K-12": [
      32
    ]
  },
  {
    "Eligible free or reduced price meal rate for K-12 = `FRPM Count (K-12)` / `Enrollment (K-12)`": [
      32
    ]
  },
  {
    "Charted school means `Charter School (Y/N)` = 1 in the table frpm": [
      35
    ]
  },
  {
    "Students enrolled in grades 1 through 12 refers to `Enrollment (K-12)`": [
      35
    ]
  },
  {
    "full name means first name, last name": [
      36
    ]
  },
  {
    "There are at most 3 administrators for each school": [
      36
    ]
  },
  {
    "SAT Scores are greater or equal to 1500 refers to NumGE1500": [
      36
    ]
  },
  {
    "Execellence Rate = NumGE1500 / NumTstTakr": [
      37
    ]
  },
  {
    "complete address has Street, City, State, Zip code": [
      37
    ]
  },
  {
    "between 1/1/1980 and 12/31/1980 means the year = 1980": [
      39
    ]
  },
  {
    "Fresno Unified is a name of district": [
      40
    ]
  },
  {
    "respective counties means PARTITION BY County": [
      41
    ]
  },
  {
    "Average score for all subjects can be computed by AvgScrMath + AvgScrRead + AvgScrWrite": [
      43
    ]
  },
  {
    "Usually, administrators manage the school stuff.": [
      45
    ]
  },
  {
    "State Special Schools refers to DOC = 31": [
      46
    ]
  },
  {
    "Grades 1 through 12 means K-12": [
      46
    ]
  },
  {
    "Elementary School District refers to DOC = 52": [
      47,
      48,
      61
    ]
  },
  {
    "Monthly average number of schools that opened in 1980 = count(schools that opened in 1980) / 12": [
      47
    ]
  },
  {
    "Unified School District refers to DOC = 54.": [
      48
    ]
  },
  {
    "Closure date and closed date are synonyms": [
      49
    ]
  },
  {
    "'Closed' was mentioned in schools.StatusType.": [
      49
    ]
  },
  {
    "Postal street and mailing street are synonyms.": [
      50
    ]
  },
  {
    "Total SAT scores can be computed by AvgScrRead + AvgScrMath + AvgScrWrite": [
      52
    ]
  },
  {
    "Ratio = count(schools in Colusa) / count(schools in Humboldt)": [
      55
    ]
  },
  {
    "Virtual = 'P' means partially virtual": [
      60
    ]
  },
  {
    "Charter schools refers to Charter = 1 in the table schools": [
      60
    ]
  },
  {
    "Chartered schools refer to Charter = 1 in the table schools": [
      61,
      63
    ]
  },
  {
    "non-chartered schools refer to schools whose Charter = 0": [
      62
    ]
  },
  {
    "K-12 means grades 1 through 12": [
      62
    ]
  },
  {
    "percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`": [
      62
    ]
  },
  {
    "Full name refers to first name, last name": [
      63
    ]
  },
  {
    "Ratio in percentage = (count(locally funded schools in Santa Clara) / count(all funding type schools in Santa Clara) * 100%": [
      65
    ]
  },
  {
    "Directly funded schools refers to FundingType = 'Directly Funded'": [
      66
    ]
  },
  {
    "Youth Authority Facilities (CEA) refers to SOC = 11": [
      68
    ]
  },
  {
    "1980s = years between 1980 and 1989": [
      68
    ]
  },
  {
    "State Special Schools means that SOC = 31.": [
      69
    ]
  },
  {
    "When magent is equal to 0 in the database, it means ths school doesn't offer a magnet program.": [
      71
    ]
  },
  {
    "State Special School means EdOpsCode = 'SSS'": [
      72
    ]
  },
  {
    "District Special Education Consortia School refers to EdOpsCode = 'SPECON'.": [
      74
    ]
  },
  {
    "High school can be represented as EILCode = 'HS'": [
      76
    ]
  },
  {
    "Percent (%) Eligible FRPM (Ages 5-17) can be acquired by `FRPM Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100": [
      77
    ]
  },
  {
    "'Does not offer physical building' means Virtual = F in the database.": [
      79
    ]
  },
  {
    "State of California refers to state = 'CA'": [
      81
    ]
  },
  {
    "the highest longitude refers to the school with the maximum absolute longitude value.": [
      82
    ]
  },
  {
    "Kindergarten to 8th grade refers to K-8": [
      83
    ]
  },
  {
    "'Offers a magnet program' means Magnet = 1": [
      83
    ]
  },
  {
    "Multiple Provision Types refers to `NSLP Provision Status` = 'Multiple Provision Types'": [
      83
    ]
  },
  {
    "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%": [
      85
    ]
  },
  {
    "Intermediate/Middle Schools refers to SOC = 62": [
      87
    ]
  },
  {
    "Unified School refers to DOC = 54": [
      87
    ]
  },
  {
    "years between 2009 and 2010 can refer to 'between 1/1/2009 to 12/31/2010'": [
      87
    ]
  },
  {
    "A3 contains the data of region": [
      89,
      90
    ]
  },
  {
    "'POPLATEK PO OBRATU' represents for 'issuance after transaction'.": [
      89
    ]
  },
  {
    "A12 refers to unemploymant rate 1995": [
      91
    ]
  },
  {
    "A13 refers to unemploymant rate 1996": [
      91
    ]
  },
  {
    "A11 refers to average salary": [
      92,
      94,
      95,
      107,
      124
    ]
  },
  {
    "Female mapps to gender = 'F'": [
      92
    ]
  },
  {
    "Male means that gender = 'M'": [
      93,
      154
    ]
  },
  {
    "A3 refers to region": [
      93,
      162
    ]
  },
  {
    "A11 pertains to average salary.": [
      93
    ]
  },
  {
    "Female means gender = 'F'": [
      94
    ]
  },
  {
    "Gap = highest average salary - lowest average salary": [
      94
    ]
  },
  {
    "If the person A's birthdate > B's birthdate, it means that person B is order than person A.": [
      94
    ]
  },
  {
    "If the person A's birthdate < B's birthdate, it means that person B is younger than person A": [
      95
    ]
  },
  {
    "'POPLATEK TYDNE' stands for weekly issuance": [
      96,
      98,
      186
    ]
  },
  {
    "'POPLATEK PO OBRATU' stands for issuance after transaction": [
      97
    ]
  },
  {
    "Loan validity more than 12 months refers to duration > 12": [
      99
    ]
  },
  {
    "Customers refer to clients": [
      100
    ]
  },
  {
    "Female refers to gender = 'F'": [
      100,
      112,
      128,
      146,
      147,
      168,
      181,
      184,
      185
    ]
  },
  {
    "Names of districts appear in column A2": [
      100
    ]
  },
  {
    "Earlier birthdate refers to older age": [
      107
    ]
  },
  {
    "A2 has region names": [
      109
    ]
  },
  {
    "Woman and female share the same meaning": [
      109
    ]
  },
  {
    "female refers to gender = 'F'": [
      109
    ]
  },
  {
    "A2 refers to district name": [
      111,
      140,
      151
    ]
  },
  {
    "Litomerice is one of district names.": [
      111
    ]
  },
  {
    "A2 refers to district names": [
      112,
      133
    ]
  },
  {
    "A3 stands for region names": [
      114
    ]
  },
  {
    "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100": [
      115
    ]
  },
  {
    "Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.": [
      115
    ]
  },
  {
    "Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%": [
      116
    ]
  },
  {
    "Loan paid with no issue means contract finished, no problems": [
      117
    ]
  },
  {
    "status = 'A' means contract finished, no problems": [
      117
    ]
  },
  {
    "Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%": [
      117
    ]
  },
  {
    "Status = 'C' stands for running contract, ok so far": [
      118
    ]
  },
  {
    "Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100.": [
      118
    ]
  },
  {
    "Records about district names could be found in A2": [
      119
    ]
  },
  {
    "A3 contains the information about regions. 'POPLATEK PO OBRATU' stands for issuance after transaction": [
      119
    ]
  },
  {
    "Accounts holder refers to the person who own this account.": [
      120
    ]
  },
  {
    "A2 refers to the names of districts.": [
      121
    ]
  },
  {
    "A2, A3 contains the information about district and region respectively.": [
      122
    ]
  },
  {
    "A2 contains district names and A3 contains region names.": [
      123
    ]
  },
  {
    "A3 refers to regions": [
      124
    ]
  },
  {
    "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100": [
      125
    ]
  },
  {
    "unemployment rate 2015 appears in the A12": [
      125
    ]
  },
  {
    "unemployment rate 2016 appears in the A13": [
      125
    ]
  },
  {
    "Loan contracts which are still running where client are in debt can be presented as status = 'D'": [
      125
    ]
  },
  {
    "A2 contains the information about district.": [
      126
    ]
  },
  {
    "'POPLATEK MESICNE' stands for monthly issuance": [
      127
    ]
  },
  {
    "A2 refers to districts": [
      128
    ]
  },
  {
    "Non-credit card withdraws refers to type = 'VYDAJ'": [
      129
    ]
  },
  {
    "January 1996 can be found by date LIKE '1996-01%' in the database": [
      129
    ]
  },
  {
    "A2 means district names": [
      129
    ]
  },
  {
    "A3 contains the region names": [
      130,
      150
    ]
  },
  {
    "South Bohemia is one of region names.": [
      130
    ]
  },
  {
    "A3 refers to district names": [
      131
    ]
  },
  {
    "Active loan refers to running contracts": [
      131
    ]
  },
  {
    "Status = 'C' stands for running contract, OK so far": [
      131,
      137
    ]
  },
  {
    "Status = 'D' stands for running contract, client in debt": [
      131,
      137
    ]
  },
  {
    "Male refers to gender = 'M'": [
      132,
      138,
      169
    ]
  },
  {
    "A13 refers to unemploymant rate in 1996": [
      133
    ]
  },
  {
    "A16 stands for no. of committed crimes 1996": [
      134
    ]
  },
  {
    "Negative balance means balance < 0": [
      135
    ]
  },
  {
    "Operation = 'VYBER KARTOU' stands for credit card withdraw. Frequency = 'POPLATEK MESICNE' stands for monthly issurance": [
      135
    ]
  },
  {
    "Frequency = 'POPLATEK MESICNE' stands for monthly issurance": [
      136
    ]
  },
  {
    "A15 stands for no. of commited crimes 1995": [
      138
    ]
  },
  {
    "High-level credit cards refers to the cards with the gold type.": [
      139
    ]
  },
  {
    "k_symbol = 'SIPO' refers to household payment": [
      142
    ]
  },
  {
    "Operation = 'VYBER KARTOU' refers to credit card withdrawn": [
      144
    ]
  },
  {
    "Operation = 'VYBER KARTOU' refers to credit card withdrawal": [
      145
    ]
  },
  {
    "A3 contains the region 'south Bohemia'": [
      147
    ]
  },
  {
    "District refers to column A2": [
      148
    ]
  },
  {
    "when the account type = 'OWNER', it's eligible for loans": [
      148,
      149
    ]
  },
  {
    "A11 represents the average salary": [
      149
    ]
  },
  {
    "Salary and income share the similar meanings": [
      149
    ]
  },
  {
    "North Bohemia is a region.": [
      150
    ]
  },
  {
    "type = 'VYDAJ' stands for withdrawal transactions": [
      151
    ]
  },
  {
    "A3 refers to region names": [
      152
    ]
  },
  {
    "A15 stands for the average number of crimes commited in 1995.": [
      152
    ]
  },
  {
    "when the account type = 'OWNER', it's eligible for loan": [
      153
    ]
  },
  {
    "District data appears in the A2": [
      154
    ]
  },
  {
    "Percent of Gold = [ count(type = 'gold' and issued date < 1998) / count(all cards)] * 100%": [
      155
    ]
  },
  {
    "A15 contains information about number of committed crimes in 1995": [
      157
    ]
  },
  {
    "operation = 'VYBER' refers to withdrawal in cash": [
      159
    ]
  },
  {
    "frequency = 'POPLATEK TYDNE' stands for weekly issuance": [
      160
    ]
  },
  {
    "status = 'A' refers to loan contracts finished with no problems": [
      163
    ]
  },
  {
    "After 1996 means date > = '1997-01-01": [
      167
    ]
  },
  {
    "Woman and female are closed": [
      168
    ]
  },
  {
    "Average salary can be found in A11": [
      168
    ]
  },
  {
    "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%": [
      169
    ]
  },
  {
    "Operation = 'VYBER KARTOU' means credit card withdrawals": [
      170
    ]
  },
  {
    "Difference in no. of committed crimes between 2 regions = Total no. of committed crimes in 1996 in north Bohemia - Total no. of committed crimes in 1996 in e ast Bohemia. A3 refers to region. Data about no. of committed crimes 1996 appears in A16": [
      171
    ]
  },
  {
    "k_symbol refers to the purpose of payments": [
      173
    ]
  },
  {
    "Frequency = 'POPLATEK PO OBRATU' stands for issuance after transaction": [
      175
    ]
  },
  {
    "Man and male refers to gender = 'M'": [
      182
    ]
  },
  {
    "'SIPO' stands for household payment": [
      182
    ]
  },
  {
    "Percentage of female clients in Prague branch = count[female clients with accounts in Prague branch / count(clients with accounts in Prague branch)] * 100%": [
      185
    ]
  },
  {
    "A3 may contain information about Prague": [
      185
    ]
  },
  {
    "Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%": [
      186
    ]
  },
  {
    "Male means gender = 'M'": [
      186
    ]
  },
  {
    "Frequency = 'POPLATEK TYDNE' refers to weekly issuance": [
      187
    ]
  },
  {
    "Female refers to 'F' in the gender": [
      189
    ]
  },
  {
    "A11 contains information about average salary": [
      189
    ]
  },
  {
    "East Bohemia appears in the column A3, which refers to the region.": [
      190
    ]
  },
  {
    "Frequency = 'POPLATEK TYDNE' referes to weekly statement": [
      191
    ]
  },
  {
    "status = 'C' stands for running contract, OK so far": [
      192
    ]
  },
  {
    "status = 'D' stands for running contract, client in debt. 'POPLATEK PO OBRATU' stands for issuance after transaction": [
      192
    ]
  },
  {
    "Only the owner accounts have the right to issue permanent orders or apply for loans": [
      193
    ]
  },
  {
    "the credit card is high-level refers to card.type = 'gold'": [
      194
    ]
  },
  {
    "eligible for loans refers to disp.type = 'OWNER'": [
      194
    ]
  },
  {
    "most common bond type refers MAX(COUNT(bond_type))": [
      195
    ]
  },
  {
    "non-carcinogenic molecules refers to label = '-'": [
      196
    ]
  },
  {
    "chlorine atoms refers to element = 'cl'": [
      196
    ]
  },
  {
    "single-bonded molecules refers to bond_type = '-'": [
      197
    ]
  },
  {
    "average number of oxygen atom = AVG(element = 'o')": [
      197
    ]
  },
  {
    "carcinogenic molecules refers to label = '+'": [
      198
    ]
  },
  {
    "single-bonded refers to bond_type = '-'": [
      198
    ]
  },
  {
    "average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id))": [
      198
    ]
  },
  {
    "non-carcinogenic refers to label = '-'": [
      199
    ]
  },
  {
    "sodium atoms refers to element = 'na'": [
      199
    ]
  },
  {
    "triple-bonded molecules refers to bond_type = '#'": [
      200
    ]
  },
  {
    "carcinogenic refers to label = '+'": [
      200
    ]
  },
  {
    "carbon refers to element = 'c'": [
      201,
      205,
      271,
      272,
      292,
      297,
      333,
      338
    ]
  },
  {
    "double-bond molecules refers to bond_type = '='": [
      201
    ]
  },
  {
    "percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id))": [
      201
    ]
  },
  {
    "triple type bonds refers to bond_type = '#'": [
      202
    ]
  },
  {
    "atoms with no bromine refers to element ! = 'br'": [
      203
    ]
  },
  {
    "first 100 molecules in number order refers to molecule_id between 'TR000' and 'TR099'": [
      204
    ]
  },
  {
    "label = '+' means molecules are carcinogenic": [
      204,
      222,
      281
    ]
  },
  {
    "TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9'": [
      206
    ]
  },
  {
    "double type bond refers to bond_type = '='": [
      207
    ]
  },
  {
    "with hydrogen refers to element = 'h'": [
      208
    ]
  },
  {
    "label most numerous in atoms refers to MAX(COUNT(label))": [
      208
    ]
  },
  {
    "type of bond refers to bond_type": [
      209,
      213,
      229,
      320
    ]
  },
  {
    "chlorine refers to element = 'cl'": [
      209,
      271,
      273,
      308
    ]
  },
  {
    "single type bond refers to bond_type = '-'": [
      210,
      215,
      232
    ]
  },
  {
    "label = '-' means molecules are non-carcinogenic": [
      211,
      212,
      214,
      222,
      241,
      262,
      264,
      265,
      270,
      272,
      278,
      279,
      280,
      282,
      283,
      297,
      303,
      316,
      323,
      327,
      334,
      336
    ]
  },
  {
    "least numerous refers to MIN(COUNT(element))": [
      212
    ]
  },
  {
    "between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around": [
      213
    ]
  },
  {
    "tin refers to element ! = 'sn'": [
      214
    ]
  },
  {
    "label = '+' mean molecules are carcinogenic": [
      214,
      218,
      219,
      227,
      235,
      237,
      242,
      244,
      250,
      251,
      255,
      261,
      264,
      266,
      270,
      273,
      279,
      280,
      282,
      283,
      288,
      289,
      291,
      293,
      294,
      295,
      298,
      299,
      303,
      304,
      310,
      312,
      315,
      317,
      323,
      325,
      329,
      330,
      331,
      339
    ]
  },
  {
    "with iodine element refer to element = 'i'": [
      215
    ]
  },
  {
    "with sulfur element refers to element = 's'": [
      215
    ]
  },
  {
    "Should consider the distinct atoms when counting": [
      215,
      218
    ]
  },
  {
    "triple bond refers to bond_type = '#'": [
      216,
      219,
      238,
      246,
      248,
      253,
      258,
      260,
      267,
      272,
      276,
      280,
      284,
      286,
      301,
      306,
      320,
      330,
      336
    ]
  },
  {
    "TR181 molecule refers to molecule_id = 'TR181'": [
      217
    ]
  },
  {
    "contain fluorine refers to element = 'f'": [
      218
    ]
  },
  {
    "percentage = DIVIDE(SUM(element = 'f') * 100, COUNT(molecule_id)) where label = '+'": [
      218
    ]
  },
  {
    "percentage = DIVIDE(SUM(bond_type = '#') * 100, COUNT(bond_id)) as percent where label = '+'": [
      219
    ]
  },
  {
    "TR000 is the molecule id": [
      220,
      229
    ]
  },
  {
    "TR001 is the molecule id": [
      221,
      274
    ]
  },
  {
    "TR001_2_6 is the bond id": [
      221
    ]
  },
  {
    "difference = SUBTRACT(SUM(label = '+'), SUM(label = '-'))": [
      222
    ]
  },
  {
    "TR000_2_5 is the bond id": [
      223
    ]
  },
  {
    "TR000_2 is the atom id": [
      224
    ]
  },
  {
    "atom ID 2 refers to atom_id2": [
      224
    ]
  },
  {
    "double bond refers to bond_type = ' = '": [
      225,
      244,
      246,
      250,
      258,
      267,
      275,
      284,
      287,
      294,
      301,
      303,
      310,
      311,
      320,
      326,
      335,
      338
    ]
  },
  {
    "double bond refers to bond_type = '='": [
      226,
      328
    ]
  },
  {
    "TR008 is the molecule id": [
      226
    ]
  },
  {
    "percentage = DIVIDE(SUM(bond_type = '='), COUNT(bond_id)) as percent where molecule_id = 'TR008'": [
      226
    ]
  },
  {
    "percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent": [
      227
    ]
  },
  {
    "hydrogen refers to element = 'h'": [
      228,
      282,
      298,
      330
    ]
  },
  {
    "TR206 is the molecule id": [
      228
    ]
  },
  {
    "percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'": [
      228
    ]
  },
  {
    "TR060 is the molecule id": [
      230
    ]
  },
  {
    "TR010 is the molecule id": [
      231
    ]
  },
  {
    "majority of the bond found refers to MAX(COUNT(bond_type))": [
      231
    ]
  },
  {
    "label = '-' means molecules are not carcinogenic": [
      232
    ]
  },
  {
    "list top three molecules refers to return molecule_id and order by molecule_id": [
      232
    ]
  },
  {
    "TR006 is the molecule id": [
      233
    ]
  },
  {
    "TR009 is the molecule id": [
      234
    ]
  },
  {
    "involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12'": [
      234
    ]
  },
  {
    "have bromine element refers to element = 'br'": [
      235
    ]
  },
  {
    "atoms refer to atom_id or atom_id2": [
      236
    ]
  },
  {
    "TR001_10 is the atom id": [
      237
    ]
  },
  {
    "connections refers to bond_id": [
      239
    ]
  },
  {
    "atom 19 refers to atom_id like 'TR%_19'": [
      239
    ]
  },
  {
    "TR004 is the molecule id": [
      240
    ]
  },
  {
    "atoms from 21 to 25 refers to SUBSTR(atom_id, 7, 2) between '21' and '25'": [
      242
    ]
  },
  {
    "have phosphorus as atom elements refers to element = 'p'": [
      243
    ]
  },
  {
    "have nitrogen as atom elements refers to element = 'n'": [
      243
    ]
  },
  {
    "atoms with the element iodine refers to element = 'i'": [
      245
    ]
  },
  {
    "average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'": [
      245
    ]
  },
  {
    "bond ID of atom 45 refers to SUBSTR(atom_id, 7, 2) + 0 = 45": [
      246
    ]
  },
  {
    "single bond refers to bond_type = '-'": [
      246,
      255,
      258,
      259,
      262,
      263,
      267,
      278,
      284,
      301,
      305,
      314,
      320,
      324,
      332
    ]
  },
  {
    "atoms cannot bond with other atoms means atom_id NOT in connected table": [
      247
    ]
  },
  {
    "TR041 is the molecule id": [
      248
    ]
  },
  {
    "TR144_8_19 is the bond id": [
      249
    ]
  },
  {
    "atom that has the element lead refers to atom_id where element = 'pb'": [
      252
    ]
  },
  {
    "DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)) ))": [
      254
    ]
  },
  {
    "proportion = DIVIDE(SUM(label = '+') * 100, COUNT(bond_id)) where bond_type = '-'": [
      255
    ]
  },
  {
    "consisting of element carbon and hydrogen refers to element in('c', 'h')": [
      256
    ]
  },
  {
    "element sulfur refers to element = 's'": [
      257
    ]
  },
  {
    "element Tin refers to element = 'sn'": [
      258
    ]
  },
  {
    "phosphorus refers to element = 'p'": [
      260
    ]
  },
  {
    "bromine refers to element = 'br'": [
      260
    ]
  },
  {
    "element chlorine refers to element = 'cl'": [
      263
    ]
  },
  {
    "percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'": [
      263
    ]
  },
  {
    "TR000, TR001 and TR002 are molecule id": [
      264
    ]
  },
  {
    "TR001_10_11 is the bond id": [
      268,
      285
    ]
  },
  {
    "iodine refers to element = 'i'": [
      269
    ]
  },
  {
    "calcium refers to element = 'ca'": [
      270,
      283
    ]
  },
  {
    "MAX(label)": [
      270
    ]
  },
  {
    "percentage = DIVIDE(SUM(element = 'pb')": [
      273
    ]
  },
  {
    "COUNT(molecule_id)) as percentage where label = '+'": [
      273
    ]
  },
  {
    "first atom refers to atom_id": [
      276
    ]
  },
  {
    "second atom refers to atom_id2": [
      276
    ]
  },
  {
    "TR000_1_2 is the bond id": [
      277
    ]
  },
  {
    "4th atom of each molecule refers to substr(atom_id, 7, 1) = '4'": [
      281
    ]
  },
  {
    "ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006'": [
      282
    ]
  },
  {
    "Carbon refers to element = 'c'": [
      284
    ]
  },
  {
    "element = 'cl' means Chlorine": [
      285,
      290,
      302,
      304,
      306,
      307,
      319,
      322,
      328,
      334
    ]
  },
  {
    "element = 'c' means Carbon": [
      285,
      290,
      302,
      304,
      306,
      307,
      319,
      322,
      328,
      334
    ]
  },
  {
    "element = 'h' means Hydrogen": [
      285,
      290,
      302,
      304,
      306,
      307,
      319,
      322,
      328,
      334
    ]
  },
  {
    "element = 'o' means Oxygen, element = 's' means Sulfur": [
      285,
      290,
      302,
      304,
      306,
      307,
      319,
      322,
      328,
      334
    ]
  },
  {
    "element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine": [
      285,
      290,
      302,
      304,
      306,
      307,
      319,
      322,
      328,
      334
    ]
  },
  {
    "element = 'i' means Iodine": [
      285,
      290,
      302,
      304,
      306,
      307,
      319,
      322,
      328,
      334
    ]
  },
  {
    "element = 'sn' means Tin": [
      285,
      290,
      302,
      304,
      306,
      307,
      319,
      322,
      328,
      334
    ]
  },
  {
    "element = 'pb' means Lead": [
      285,
      290,
      302,
      304,
      306,
      307,
      319,
      322,
      328,
      334
    ]
  },
  {
    "element = 'te' means Tellurium": [
      285,
      290,
      302,
      304,
      306,
      307,
      319,
      322,
      328,
      334
    ]
  },
  {
    "element = 'ca' means Calcium": [
      285,
      290,
      302,
      304,
      306,
      307,
      319,
      322,
      328,
      334
    ]
  },
  {
    "molecule id refers to SUBSTR(bond_id, 1, 5)": [
      285
    ]
  },
  {
    "atom 1 refers to SUBSTR(bond_id, 7, 2)": [
      285
    ]
  },
  {
    "atom 2 refers to SUBSTR(bond_id, 10, 2)": [
      285
    ]
  },
  {
    "TR047 is the molecule id": [
      287
    ]
  },
  {
    "percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(all bond_id)) as percent where molecule_id = 'TR047'": [
      287
    ]
  },
  {
    "between TR010 to TR050 refers to substr(molecule_id, 3, 3)>=10 AND substr(molecule_id, 3, 3) <= 50": [
      292
    ]
  },
  {
    "hydrogen refers to element = h'": [
      295
    ]
  },
  {
    "percentage = DIVIDE(SUM(label = '+' and element = 'h'), COUNT(molecule_id)) * 100.0": [
      298
    ]
  },
  {
    "TR186 is a molecule id": [
      300
    ]
  },
  {
    "bond_type ! = ' = '": [
      311
    ]
  },
  {
    "sulphur refers to element = 's'": [
      311
    ]
  },
  {
    "percentage = DIVIDE(SUM(label = '+' and element = 'cl'), COUNT(molecule_id)) as percentage": [
      317
    ]
  },
  {
    "atom with ID refers to atom_id": [
      322
    ]
  },
  {
    "percentage = DIVIDE(SUM(bond_type = '-'), COUNT(bond_id)) as percentage": [
      324
    ]
  },
  {
    "nitrogen refers to element = 'n'": [
      325
    ]
  },
  {
    "sulphur refers to element - 's'": [
      326
    ]
  },
  {
    "molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5": [
      327
    ]
  },
  {
    "molecule that have the highest number of atoms consisted in in refers to MAX(COUNT(atom.molecule_id))": [
      329
    ]
  },
  {
    "percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) * 100.0 where element = 'h' AND bond_type = '#'": [
      330
    ]
  },
  {
    "molecules between TR004 to TR010 refers molecule_id BETWEEN 'TR004' and 'TR010'": [
      332
    ]
  },
  {
    "oxygen refers to element = 'o'": [
      335,
      339
    ]
  },
  {
    "TR002 is the molecule id": [
      337
    ]
  },
  {
    "incredibly poweful foils refers to cardKingdomFoilId is not null AND cardKingdomId is not null": [
      340
    ]
  },
  {
    "borderless' refers to borderColor": [
      341
    ]
  },
  {
    "poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null": [
      341
    ]
  },
  {
    "more converted mana for the face refers to Max(faceConvertedManaCost)": [
      342
    ]
  },
  {
    "below 100 on EDHRec refers to EDHRec <100": [
      343
    ]
  },
  {
    "with 2015 frame style refers to frameVersion = 2015": [
      343
    ]
  },
  {
    "mythic rarity printing refers to rarity = 'mythic'": [
      344
    ]
  },
  {
    "card banned refers to status = 'Banned'": [
      344
    ]
  },
  {
    "in gladiator format refers to format = 'gladiator'": [
      344
    ]
  },
  {
    "Artifact type of cards refers to types = 'Artifact'": [
      345
    ]
  },
  {
    "card does not have multiple faces on the same card refers to side is NULL'": [
      345
    ]
  },
  {
    "vintage play format refers to format = 'vintage'": [
      345
    ]
  },
  {
    "unknown power refers to power = '*' or POWER IS NULL": [
      346
    ]
  },
  {
    "commander play format refers to format = 'commander'": [
      346
    ]
  },
  {
    "legal for commander play format refers to format = 'commander' where status = 'Legal'": [
      346
    ]
  },
  {
    "cards have missing or degraded properties and value refers to hasContentWarning = 1": [
      347
    ]
  },
  {
    "'Stephen Daniele' is artist": [
      347
    ]
  },
  {
    "Find all cards refers to return card id": [
      347
    ]
  },
  {
    "Sublime Epiphany' is name of cards": [
      348
    ]
  },
  {
    "number 74s refers to number = '74s'": [
      348
    ]
  },
  {
    "information refers to text": [
      348
    ]
  },
  {
    "with the most ruling information refers to Max(count(rulings.uuid))": [
      349
    ]
  },
  {
    "the card is the promotional printing refers to isPromo = 1": [
      349
    ]
  },
  {
    "annul refers to name = 'annul'": [
      350
    ]
  },
  {
    "numbered 29 refers to number = '29'": [
      350
    ]
  },
  {
    "Japanese' is the language": [
      351
    ]
  },
  {
    "Chinese Simplified' is the language": [
      352,
      381
    ]
  },
  {
    "percentage = Divide(Sum(id where language = 'Chinese Simplified'), Count(id)) *100": [
      352
    ]
  },
  {
    "Italian translation refers to language = 'Italian'": [
      353,
      474
    ]
  },
  {
    "total number of card per set refers to totalSetSize": [
      353
    ]
  },
  {
    "Aaron Boyd' is artist": [
      354,
      373
    ]
  },
  {
    "Angel of Mercy' is the name of card": [
      355,
      360
    ]
  },
  {
    "infinite power refers to power = '*'": [
      356
    ]
  },
  {
    "card Duress refers to name = 'Duress'": [
      357
    ]
  },
  {
    "type of promotion refers to promoTypes": [
      357
    ]
  },
  {
    "name of card  = 'Ancestor''s Chosen'": [
      358
    ]
  },
  {
    "Ancestor's Chosen' is the name of card": [
      359,
      362
    ]
  },
  {
    "type of the card as originally printed refers to originaltype": [
      359
    ]
  },
  {
    "restricted refers to status = 'restricted'": [
      361,
      363
    ]
  },
  {
    "have text boxes refers to is Textless = 0": [
      361
    ]
  },
  {
    "description about the ruling refers to text": [
      362
    ]
  },
  {
    "found in the starter deck refers to isStarter = 1": [
      363
    ]
  },
  {
    "Cloudchaser Eagle is the name of card": [
      364
    ]
  },
  {
    "Benalish Knight' is the name of card": [
      365,
      366
    ]
  },
  {
    "rule of playing card refers to format": [
      366
    ]
  },
  {
    "Phyrexian' is the language": [
      367
    ]
  },
  {
    "name of artists refers to artist": [
      367
    ]
  },
  {
    "borderless card refers to borderColor = 'borderless'": [
      368,
      370
    ]
  },
  {
    "percentage = Divide(Count (id) where borderColor = 'borderless', Count(id)) *100": [
      368
    ]
  },
  {
    "German' is the language": [
      369
    ]
  },
  {
    "reprinted refers to isReprint = 1": [
      369,
      420
    ]
  },
  {
    "'Russian' is the language": [
      370
    ]
  },
  {
    "Story Spotlight card refers to isStorySpotlight = 1": [
      371
    ]
  },
  {
    "French is the language": [
      371
    ]
  },
  {
    "Percentage = Divide(Count(id) where language = 'French' and isStorySpotlight = 1, Count(id) where isStorySpotlight = 1)*100": [
      371
    ]
  },
  {
    "black border card refers to borderColor = black": [
      374
    ]
  },
  {
    "available on mtgo refers to availability = mtgo": [
      374
    ]
  },
  {
    "add quotes for string = 'black' and = 'mtgo'": [
      374
    ]
  },
  {
    "converted mana cost of 0 refers to covertedManaCost = 0": [
      375
    ]
  },
  {
    "subtype other than Angel refers to subtypes is not 'Angel'": [
      377
    ]
  },
  {
    "Incredibly powerful refers to both cardKingdomFoilId and cardKingdomId IS NOT Null": [
      378
    ]
  },
  {
    "duel deck a refers to duelDeck = a": [
      379
    ]
  },
  {
    "available in paper refers to availability = 'paper'": [
      382,
      410
    ]
  },
  {
    "'Japanese is the language": [
      382
    ]
  },
  {
    "banned card refers to status = 'Banned'": [
      383
    ]
  },
  {
    "white border refers to borderColor = 'white'": [
      383
    ]
  },
  {
    "legacy card refers to format = 'legacy'": [
      384
    ]
  },
  {
    "foreign language refers to language in foreign_data": [
      384,
      391
    ]
  },
  {
    "Beacon of Immortality' is the name of card": [
      385
    ]
  },
  {
    "future frame version refers to frameVersion = 'future'": [
      386
    ]
  },
  {
    "legility status refers to status = 'legal'": [
      386
    ]
  },
  {
    "set OGW refers to setCode = 'OGW'": [
      387
    ]
  },
  {
    "set 10E refers to setCode = '10E'": [
      388
    ]
  },
  {
    "converted mana of 5 refers to convertedManaCost = 5": [
      388
    ]
  },
  {
    "Creature - Elf is the originalType": [
      389
    ]
  },
  {
    "ID 1-20 refers to id BETWEEN 1 and 20": [
      390
    ]
  },
  {
    "Artifact card refers to originalType = 'Artifact'": [
      391
    ]
  },
  {
    "black color refers to colors = 'B'": [
      391
    ]
  },
  {
    "uncommon refers to rarity = 'uncommon'": [
      392
    ]
  },
  {
    "John Avon refer to artist": [
      393
    ]
  },
  {
    "foil poweful foils refers to cardKingdomId and cardKingdomFoildId is NOT NULL": [
      393
    ]
  },
  {
    "white bordered cards refer to borderColor = 'white'": [
      394
    ]
  },
  {
    "powerful cards refers to cardKingdomFoilId is not null AND cardKingdomId is not null (replace)": [
      394
    ]
  },
  {
    "UDON refer to artist": [
      395
    ]
  },
  {
    "availabe in mtgo refers to availability = 'mtgo'": [
      395
    ]
  },
  {
    "starting maximum hand size of -1 refers to hand = -1": [
      395
    ]
  },
  {
    "sensitive content warning refer to hasContentWarning = 1": [
      396
    ]
  },
  {
    "available on paper refer to availability = 'paper' 1993 refer to frameVersion": [
      396
    ]
  },
  {
    "available in paper and mtgo refers to availability = 'mtgo,paper'": [
      397
    ]
  },
  {
    "frameVersion = 2003": [
      397
    ]
  },
  {
    "borderColor = 'black'": [
      397
    ]
  },
  {
    "unconverted mana refer to manaCost": [
      398
    ]
  },
  {
    "Rob Alexander refer to artist": [
      398
    ]
  },
  {
    "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'": [
      399
    ]
  },
  {
    "Spanish refer to language": [
      400,
      403
    ]
  },
  {
    "set code refers to setCode": [
      400
    ]
  },
  {
    "only available in online game variationsrefer to isOnlineOnly =1": [
      401
    ]
  },
  {
    "legendary frame effect cards refer to frameEffects = 'legendary'": [
      401
    ]
  },
  {
    "percentage refer to DIVIDE(COUNT(isOnlineOnly=1), COUNT(id)) from cards where frameEffects = 'legendary'": [
      401
    ]
  },
  {
    "Story Spotlight cards that do not have a text box refers to isStorylight = 1 and isTextless = 0": [
      402
    ]
  },
  {
    "Percentage = DIVIDE(SUM(count(id) where isStorylight = 1 AND isTextless = 0 ), SUM(count(id))) * 100": [
      402
    ]
  },
  {
    "Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100": [
      403
    ]
  },
  {
    "set refer to setCode": [
      404
    ]
  },
  {
    "number of cards refers to baseSetSize": [
      404,
      467,
      496
    ]
  },
  {
    "baseSetsize = 309": [
      404
    ]
  },
  {
    "Commander block refer to block = 'Commander'": [
      405
    ]
  },
  {
    "sets refer to code = setCode": [
      405
    ]
  },
  {
    "Portuguese refer to language = 'Portuguese (Brasil)'": [
      405
    ]
  },
  {
    "legal status refer to status = 'legal'": [
      406
    ]
  },
  {
    "Goblin-type cards refer to types = 'Creature'": [
      406
    ]
  },
  {
    "German refer to language": [
      407
    ]
  },
  {
    "all types refer to the subtypes, supertypes": [
      407
    ]
  },
  {
    "subtypes is not null AND supertypes is not null": [
      407
    ]
  },
  {
    "unknown power cards refers to power is null or power = '*'": [
      408,
      421
    ]
  },
  {
    "contain info about the triggered ability refers to text contains 'triggered ability'": [
      408
    ]
  },
  {
    "pre-modern format refers to format = 'premodern'": [
      409
    ]
  },
  {
    "do not have multiple faces refers to side IS NULL": [
      409
    ]
  },
  {
    "in French refers to language = 'French'": [
      412,
      416
    ]
  },
  {
    "black border color refers to borderColor = 'black'": [
      412,
      475
    ]
  },
  {
    "with print rarity refers to rarity = 'rare'": [
      413
    ]
  },
  {
    "on 01/02/2007 refers to date = '2007-02-01'": [
      413
    ]
  },
  {
    "set of 180 cards refers to baseSetSize = 180": [
      414
    ]
  },
  {
    "do not have a content warning refers to hasContentWarning = 0": [
      415
    ]
  },
  {
    "percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal'": [
      415
    ]
  },
  {
    "cards without power refers to power IS NULL OR power = '*'": [
      416
    ]
  },
  {
    "percentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100": [
      416
    ]
  },
  {
    "Japanese translated refers to language = 'Japanese'": [
      417
    ]
  },
  {
    "expansion sets refers to type = 'expansion'": [
      417
    ]
  },
  {
    "percentage = DIVIDE(COUNT(language = 'Japanese'),COUNT(language))*100": [
      417
    ]
  },
  {
    "kind of printing refers to availability": [
      418
    ]
  },
  {
    "Daren Bader created refers to artist = 'Daren Bader'": [
      418
    ]
  },
  {
    "color cards with no borders refers to borderColor = 'borderless'": [
      419
    ]
  },
  {
    "ranked higher than 12000 on EDHRec refers to edhrecRank > 12000": [
      419
    ]
  },
  {
    "are oversized refers to isOversized = 1": [
      420
    ]
  },
  {
    "printed for promotions refers to isPromo = 1": [
      420
    ]
  },
  {
    "promotional types for arena league refers to promoTypes = 'arenaleague'": [
      421
    ]
  },
  {
    "multiverse number 149934 refers to multiverseid = 149934": [
      422
    ]
  },
  {
    "poweful refers to cardKingdomFoilId is not null AND cardKingdomId is not null": [
      423
    ]
  },
  {
    "do not have a text box refers to isTextless = 1": [
      424
    ]
  },
  {
    "proportion refers to DIVIDE(COUNT(Textless = 1 and layout = 'normal'),COUNT(Textless))*100": [
      424
    ]
  },
  {
    "don't have multiple faces on a single card side is null": [
      425
    ]
  },
  {
    "don't appear in Magic: The Gathering Online refers to mtgoCode is NULL or mtgoCode = ''": [
      426
    ]
  },
  {
    "known as Archenemy refers to mcmName = 'Archenemy'": [
      427
    ]
  },
  {
    "having the code ARC refers to setCode = 'ARC'": [
      427
    ]
  },
  {
    "set number 5 refers to id = 5": [
      428
    ]
  },
  {
    "set number 206 refers to id = 206": [
      429
    ]
  },
  {
    "available outside of the United States refers to isForeignOnly = 1": [
      431
    ]
  },
  {
    "has foil cards refers to isFoilOnly = 1": [
      431
    ]
  },
  {
    "with Japanese writing on them refers to language = 'Japanese'": [
      431
    ]
  },
  {
    "Russian refers to language = 'Russian'": [
      432
    ]
  },
  {
    "contains the most cards overall refers to MAX(baseSetSize)": [
      432
    ]
  },
  {
    "are only available for online games refers to isOnlineOnly = 1": [
      433
    ]
  },
  {
    "percentage = DIVIDE(COUNT(isOnlineOnly = 1),COUNT(isOnlineOnly))*100": [
      433
    ]
  },
  {
    "Japanese refers to language = 'Japanese'": [
      434
    ]
  },
  {
    "not in Magic: The Gathering Online refers to mtgoCode is null or mtgoCode = ''": [
      434
    ]
  },
  {
    "border with black color refers to borderColor = 'black'": [
      435
    ]
  },
  {
    "frame effect as extendedart refers to frameEffects = 'extendedart'": [
      436
    ]
  },
  {
    "white card borders refers to borderColor = 'white'": [
      437
    ]
  },
  {
    "has full artwork refers to isFullArt = 1": [
      437
    ]
  },
  {
    "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'": [
      440
    ]
  },
  {
    "code of sets refers to setCode": [
      443,
      447
    ]
  },
  {
    "set of Abyssal Horror refers to name = 'Abyssal Horror'": [
      446
    ]
  },
  {
    "percentage refers to DIVIDE(COUNT(convertedManaCost = 16),COUNT(convertedManaCost))*100": [
      446
    ]
  },
  {
    "designed by Aaron Miller refers to artist = 'Aaron Miller'": [
      450
    ]
  },
  {
    "are icredibily powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null": [
      450
    ]
  },
  {
    "available in paper refers to availability like '%paper%'": [
      451
    ]
  },
  {
    "have a positive starting maximum hand size refers to hand = '3'": [
      451
    ]
  },
  {
    "have a text box refers to isTextless = 0": [
      452
    ]
  },
  {
    "card \"Ancestor's Chosen\" refers to name = 'Ancestor`s Chosen'": [
      453
    ]
  },
  {
    "unknown power refers to power = '*' or power is null": [
      454
    ]
  },
  {
    "are a promotional painting refers to isPromo = 1": [
      455
    ]
  },
  {
    "have multiple faces on the same card refers to side is not Null": [
      455
    ]
  },
  {
    "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'": [
      456
    ]
  },
  {
    "list of all types refers to subtypes,supertypes": [
      456
    ]
  },
  {
    "promotional type of \"bundle\" refers to promoTypes = 'bundle'": [
      457
    ]
  },
  {
    "websites refers to purchaseUrls": [
      457
    ]
  },
  {
    "available in both \"arena\" and \"mtgo\" refers to availability like '%arena,mtgo%'": [
      458
    ]
  },
  {
    "\"Serra Angel\" refers to name = 'Serra Angel'": [
      459
    ]
  },
  {
    "\"Shrine Keeper\" refers to name = 'Shrine Keeper'": [
      459
    ]
  },
  {
    "card costs more converted mana when the value of convertedManaCost is greater": [
      459
    ]
  },
  {
    "promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'": [
      460
    ]
  },
  {
    "name of cards refers to name": [
      461
    ]
  },
  {
    "2003 card frame style refers to frameVersion = '2003'": [
      461
    ]
  },
  {
    "Italian is a language which refers to language = 'Italian'": [
      462
    ]
  },
  {
    "with \"Ancestor's Chosen\" in the card set refers to name = 'Ancestor''s Chosen'": [
      462
    ]
  },
  {
    "set of cards with \"Angel of Mercy\" in it refers to name = 'Angel of Mercy'": [
      463
    ]
  },
  {
    "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'": [
      464,
      466
    ]
  },
  {
    "set of cards with \"Ancestor''s Chosen\" in it refers to name = 'Ancestor''s Chosen'": [
      465
    ]
  },
  {
    "Korean version refers to language = 'Korean'": [
      465
    ]
  },
  {
    "designed by Adam refers to artist = 'Adam Rex'": [
      466
    ]
  },
  {
    "\"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'": [
      467
    ]
  },
  {
    "Eighth Edition is the name of card set which refers to name = 'Eighth Edition'": [
      468
    ]
  },
  {
    "Simplified Chinese refers to language = 'Chinese Simplified'": [
      468
    ]
  },
  {
    "translation of the name refers to translation": [
      468
    ]
  },
  {
    "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'": [
      469
    ]
  },
  {
    "appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa": [
      469
    ]
  },
  {
    "card set \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'": [
      470
    ]
  },
  {
    "when released refers to releaseDate": [
      470
    ]
  },
  {
    "card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'": [
      471
    ]
  },
  {
    "expansion type refers to type": [
      471,
      492,
      497,
      503
    ]
  },
  {
    "sets in the block \"Ice Age\" refers to block = 'Ice Age'": [
      472
    ]
  },
  {
    "Italian translation refers to language = 'Italian' and translation is not null": [
      472
    ]
  },
  {
    "card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'": [
      473
    ]
  },
  {
    "isForeignOnly = 1 means only available outside the United States": [
      473
    ]
  },
  {
    "have a translation means translation is not null": [
      474
    ]
  },
  {
    "base set number of under 100 refers to baseSetSize < 10": [
      474
    ]
  },
  {
    "card set Coldsnap refers to name = 'Coldsnap'": [
      475,
      476,
      477,
      478,
      479,
      483,
      484,
      486,
      487
    ]
  },
  {
    "Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy')": [
      477
    ]
  },
  {
    "card number 4 refers to number = 4": [
      478
    ]
  },
  {
    "converted mana cost higher than 5 refers to convertedManaCost > 5": [
      479
    ]
  },
  {
    "unknown power refers to power = '*' or T1.power is null": [
      479
    ]
  },
  {
    "Italian refers to language = 'Italian'": [
      480,
      483,
      484
    ]
  },
  {
    "flavor text refers to flavorText": [
      480
    ]
  },
  {
    "\"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'": [
      480,
      481
    ]
  },
  {
    "has a flavor text refers to flavorText is not null": [
      481
    ]
  },
  {
    "German refers to language = 'German'": [
      482
    ]
  },
  {
    "\"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'": [
      482
    ]
  },
  {
    "highest converted mana cost refers to MAX(convertedManaCost)": [
      484
    ]
  },
  {
    "Reminisce refers to name = 'Reminisce'": [
      485
    ]
  },
  {
    "when created is the date": [
      485
    ]
  },
  {
    "converted mana cost of 7 refers to convertedManaCost = 7": [
      486
    ]
  },
  {
    "percentage = DIVIDE(SUM(convertedManaCost = 7), SUM(convertedManaCost))*100": [
      486
    ]
  },
  {
    "foil is incredibly powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null": [
      487
    ]
  },
  {
    "the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100": [
      487
    ]
  },
  {
    "released on 2017/7/14 refers to releaseDate = '2017-07-14'": [
      488
    ]
  },
  {
    "keyrune code refers to keyruneCode": [
      489
    ]
  },
  {
    "magic card market id refers to mcmId": [
      490
    ]
  },
  {
    "magic card market name refers to mcmName": [
      491
    ]
  },
  {
    "set \"From the Vault refers to name which contains 'From the Vault: Lore'": [
      492
    ]
  },
  {
    "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized'": [
      493
    ]
  },
  {
    "all cards illustrated by Jim Pavelec refers to artist = 'Jim Pavelec'": [
      494
    ]
  },
  {
    "the text of the ruling refers to text": [
      494
    ]
  },
  {
    "cards have missing or degraded properties and values if hasContentWarning = 1 else it doesn't have": [
      494
    ]
  },
  {
    "\"Evacuation\" refers to name = 'Evacuation'": [
      495
    ]
  },
  {
    "release date refers to releaseDate": [
      495
    ]
  },
  {
    "set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'": [
      496
    ]
  },
  {
    "the set \"Huiti\u00e8me \u00e9dition\" refers to translation = 'Huiti\u00e8me \u00e9dition'": [
      497
    ]
  },
  {
    "French refers to language = 'French'": [
      498
    ]
  },
  {
    "\"Tendo Ice Bridge\" is a translated name of a card": [
      498
    ]
  },
  {
    "translated name refers to translation": [
      498
    ]
  },
  {
    "translations of the name refers to translation": [
      499
    ]
  },
  {
    "translation is not NULL": [
      499
    ]
  },
  {
    "set \"Salvat 2011\" refers to name = 'Tenth Edition'": [
      499
    ]
  },
  {
    "Japanese name refers to language = 'Japanese'": [
      500
    ]
  },
  {
    "card \"Fellwar Stone\" refers to name = 'Fellwar Stone'": [
      500
    ]
  },
  {
    "set 'Journey into Nyx Hero's Path' refers to name = 'Journey into Nyx Hero''s Path'": [
      501
    ]
  },
  {
    "release date is the date of card set being released": [
      502
    ]
  },
  {
    "set \"Ola de fr\u00edo\" refers to translation = 'Ola de fr\u00edo'": [
      502
    ]
  },
  {
    "card \"Samite Pilgrim\" refers to name = 'Samite Pilgrim'": [
      503
    ]
  },
  {
    "the set 'World Championship Decks 2004' refers to name = 'World Championship Decks 2004'": [
      504
    ]
  },
  {
    "Simplified Chinese translation refers to language = 'Chinese Simplified'": [
      505
    ]
  },
  {
    "name of the set \"Mirrodin\" refers to name = 'Mirrodin'": [
      505
    ]
  },
  {
    "Japanese translation refers to language = 'Japanese'": [
      506
    ]
  },
  {
    "in non-foil refers to isNonFoilOnly = 1": [
      506
    ]
  },
  {
    "percentage of Japanese non foil in Japanese cards refers to DIVIDE(SUM(isNonFoilOnly = 1), SUM(language = 'Japanese'))*100": [
      506
    ]
  },
  {
    "Brazil Portuguese translation refers to language = 'Portuguese (Brazil)'": [
      507
    ]
  },
  {
    "only available online refers to isOnlineOnly = 1": [
      507
    ]
  },
  {
    "percentage of online only Brazil Portuguese in all Brazil Portuguese cards refers to DIVIDE(SUM(isOnlineOnly = 1), SUM(language = 'Portuguese (Brazil)))*100": [
      507
    ]
  },
  {
    "created by Aleksi Briclot refers to artist = 'Aleksi Briclot'": [
      508
    ]
  },
  {
    "doesn't have a text box refers to isTextless = 1": [
      508
    ]
  },
  {
    "available printing types refers to availability": [
      508
    ]
  },
  {
    "the highest number of cards refers to MAX(baseSetSize)": [
      509
    ]
  },
  {
    "unique id refers to id": [
      509
    ]
  },
  {
    "doesn't have multiple faces refers to side IS NULL": [
      510
    ]
  },
  {
    "illustrator refers to artist": [
      510,
      520
    ]
  },
  {
    "when both cardKingdomFoilId and cardKingdomId are not null, this foil is incredibly powerful": [
      511
    ]
  },
  {
    "most common visual frame effects refers to MAX(frameEffects)": [
      511
    ]
  },
  {
    "unknown power refers to power IS NULL or power = '*'": [
      512
    ]
  },
  {
    "can't be found in foil refers to hasFoil = 0": [
      512
    ]
  },
  {
    "duel deck A refers to duelDeck = 'a'": [
      512
    ]
  },
  {
    "expansion type refers to type where type = 'commander'": [
      513
    ]
  },
  {
    "totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications": [
      513
    ]
  },
  {
    "highest total number of cards refers to MAX(totalSetSize)": [
      513
    ]
  },
  {
    "duels refer to format = 'duel'": [
      514
    ]
  },
  {
    "the highest uncoverted mana cost refers to MAX(manaCost)": [
      514
    ]
  },
  {
    "the oldest card refers to MIN(originalReleaseDate)": [
      515
    ]
  },
  {
    "mythic card refers to rarity = 'mythic'": [
      515
    ]
  },
  {
    "legal play refers to status = 'legal'": [
      515
    ]
  },
  {
    "play format refers to format": [
      515,
      518,
      522
    ]
  },
  {
    "Volkan Ba\u00c7\u00b5a refers to artist = 'Volkan Ba\u01f5a'": [
      516
    ]
  },
  {
    "foreign language is in French refers to language = 'French'": [
      516
    ]
  },
  {
    "rare refers to rarity = 'rare'": [
      517
    ]
  },
  {
    "enchantment card refers to types = 'Enchantment'": [
      517
    ]
  },
  {
    "Abundance cards refers to name = 'Abundance'": [
      517
    ]
  },
  {
    "format status are all legal refers to status = 'Legal'": [
      517
    ]
  },
  {
    "banned status refers to status = 'Banned'": [
      518
    ]
  },
  {
    "the highest number of banned status refers to MAX(COUNT(status = 'Banned'))": [
      518
    ]
  },
  {
    "\"Battlebond\" set refers to name = 'Battlebond'": [
      519
    ]
  },
  {
    "format of the cards refers to format": [
      520
    ]
  },
  {
    "the least amount of cards refers to MIN(artist)": [
      520
    ]
  },
  {
    "version of frame style is 1997 refers to frameVersion = '1997'": [
      521
    ]
  },
  {
    "illustrated by D. Alexander Gregory refers to artist = 'D. Alexander Gregory'": [
      521
    ]
  },
  {
    "sensitive content refers to hasContentWarning = 1": [
      521
    ]
  },
  {
    "legacy play format refers to format = 'legacy'": [
      521
    ]
  },
  {
    "status of the card refers to status": [
      521
    ]
  },
  {
    "ranked 1st on EDHRec refers to edhrecRank = 1": [
      522
    ]
  },
  {
    "banned refers to status = 'Banned'": [
      522
    ]
  },
  {
    "cards name refers to name": [
      522
    ]
  },
  {
    "AVG(id)": [
      523
    ]
  },
  {
    "releaseDate BETWEEN 1/1/2012 AND 12/31/2015": [
      523
    ]
  },
  {
    "the common language refers to MAX(COUNT(language))": [
      523
    ]
  },
  {
    "black borders refers to BorderColor = 'black'": [
      524
    ]
  },
  {
    "available only in arena refers to availability = 'arena'": [
      524
    ]
  },
  {
    "old school format refers to format = 'oldschool'": [
      525
    ]
  },
  {
    "restricted or banned refers to status = 'banned' or 'restricted'": [
      525
    ]
  },
  {
    "card designed by Matthew D. Wilson refers to artist = 'Matthew D. Wilson'": [
      526
    ]
  },
  {
    "available only in the paper refers to availability = 'paper'": [
      526
    ]
  },
  {
    "rulings refers to text": [
      527
    ]
  },
  {
    "card named and designed by Kev Walker refers to artist = 'Kev Walker'": [
      527
    ]
  },
  {
    "descending order of dates refers to MAX(date)": [
      527
    ]
  },
  {
    "the set Hour of Devastation refers to set.name = 'Hour of Devastation'": [
      528
    ]
  },
  {
    "names of all the cards in the set refers to cards.name": [
      528
    ]
  },
  {
    "legal cards refers to status = 'Legal'": [
      528
    ]
  },
  {
    "the formats refers to format": [
      528
    ]
  },
  {
    "names of sets refers to name": [
      529
    ]
  },
  {
    "doesn't have Japanese translation refers to language not like '%Japanese%'": [
      529
    ]
  },
  {
    "have Korean translation refers to language = 'Korean'": [
      529
    ]
  },
  {
    "frame styles refers to frameVersion": [
      530
    ]
  },
  {
    "cards Allen Williams worked on refers to artist = 'Allen Williams'": [
      530
    ]
  },
  {
    "banned cards refers to status = 'Banned'": [
      530
    ]
  },
  {
    "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName": [
      531
    ]
  },
  {
    "highest reputation refers to Max(Reputation)": [
      531,
      589,
      610
    ]
  },
  {
    "account created in the year 2011 refers to year(CreationDate) = 2011": [
      532
    ]
  },
  {
    "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01'": [
      533
    ]
  },
  {
    "user who has the most number of view refers to Max(Views)": [
      534
    ]
  },
  {
    "more than 100 upvotes refers to Upvotes > 100": [
      535
    ]
  },
  {
    "more than 1 downvotes refers to Downvotes > 1": [
      535
    ]
  },
  {
    "more than 10 views refers to Views > 10": [
      536
    ]
  },
  {
    "created after the year 2013 refers to year (CreationDate) > 2013": [
      536
    ]
  },
  {
    "\"csgillespie\" is the DisplayName of user": [
      537,
      538,
      540,
      542,
      543,
      545,
      551,
      552,
      553,
      555
    ]
  },
  {
    "\"Eliciting priors from experts\" is the Title of post": [
      539
    ]
  },
  {
    "owner refers to DisplayName": [
      539
    ]
  },
  {
    "highest popularity refers to Max(ViewCount)": [
      540
    ]
  },
  {
    "most valuable post refers to Max(FavoriteCount)": [
      541
    ]
  },
  {
    "total number of comments refers to Sum(CommentCount)": [
      542
    ]
  },
  {
    "the most number of answer refers to Max(AnswerCount)": [
      543
    ]
  },
  {
    "\"Examples for teaching: Correlation does not mean causation\" is the Title of post": [
      544
    ]
  },
  {
    "user who last edited refers to LastEditorUserId": [
      544
    ]
  },
  {
    "root post refers to ParentId IS Null": [
      545
    ]
  },
  {
    "the post that is well-finished refers to ClosedDate IS NOT Null": [
      546
    ]
  },
  {
    "elder users refers to Age > 65": [
      547
    ]
  },
  {
    "Score of over 19 refers to Score > = 20": [
      547
    ]
  },
  {
    "Owner refers to OwnerUserId": [
      548
    ]
  },
  {
    "'Eliciting priors from experts' is the Title of post": [
      548
    ]
  },
  {
    "\"bayesian\" is the TagName": [
      549
    ]
  },
  {
    "excerpt from refers to ExcerptPostId": [
      549
    ]
  },
  {
    "most popular tag refers to Max(Count)": [
      550
    ]
  },
  {
    "excerpt from refer to ExcerptPostId": [
      550
    ]
  },
  {
    "obtained in 2011 refers to YEAR (Date) = 2011": [
      553
    ]
  },
  {
    "who obtained the most number of badges refers to UserID with Max(Count(Id))": [
      554
    ]
  },
  {
    "average score refers to AVG(Score)": [
      555,
      680
    ]
  },
  {
    "user with over 200 views refers to Views > 200": [
      556
    ]
  },
  {
    "average number of badges = Divide (Count(Id), Count(DisplayName))": [
      556
    ]
  },
  {
    "score of over 5 refers to Score > 5": [
      557
    ]
  },
  {
    "elder user refers to Age > 65": [
      557
    ]
  },
  {
    "percentage = Divide (Count(Id where Age>65), Count(Id)) * 100": [
      557
    ]
  },
  {
    "user no. 58 refers to UserId = 58": [
      558
    ]
  },
  {
    "on 2010/7/19 refers to CreationDate = '2010-07-19'": [
      558
    ]
  },
  {
    "the creation date of the maximum number of votes refers to CreationDate where Max(Count(Id))": [
      559
    ]
  },
  {
    "number refers to Id": [
      560
    ]
  },
  {
    "'Revival' is the Name of badge": [
      560
    ]
  },
  {
    "highest score comment refers to Max(comments.Score)": [
      561
    ]
  },
  {
    "user no. 3025 refers to UserId = '3025'": [
      563
    ]
  },
  {
    "comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39.0'": [
      563
    ]
  },
  {
    "one comment refers to CommentCount = '1'": [
      564
    ]
  },
  {
    "user no. 23853 refers to UserId = '23853'": [
      565
    ]
  },
  {
    "at 9:08:18 on 2013/7/12 refers to CreationDate = '2013-07-12 09:08:18.0'": [
      565
    ]
  },
  {
    "not well-finished refers to ClosedDate IS NULL and vice versa": [
      565
    ]
  },
  {
    "post no. 65041 refers to Id = '65041'": [
      566
    ]
  },
  {
    "reputation point refers to Reputation": [
      566
    ]
  },
  {
    "\"Tiago Pasqualini\" is the DisplayName": [
      567
    ]
  },
  {
    "vote no. 6347 refers to Id = '6347'": [
      568
    ]
  },
  {
    "About data visualization is the Title that contains 'data visualization'": [
      569
    ]
  },
  {
    "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName": [
      570
    ]
  },
  {
    "user no. 24 refers to UserId = OwnerUserId = '24'": [
      571
    ]
  },
  {
    "times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))": [
      571
    ]
  },
  {
    "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post": [
      572
    ]
  },
  {
    "views refers to ViewCount": [
      572
    ]
  },
  {
    "score of 17 refers to Score = 17": [
      573
    ]
  },
  {
    "contents of comments refers to Text": [
      573
    ]
  },
  {
    "\"http://stackoverflow.com\" is the WebsiteUrl": [
      574
    ]
  },
  {
    "user refers to DisplayName": [
      574,
      576,
      578,
      586
    ]
  },
  {
    "\"SilentGhost\" is the DisplayName of user": [
      575
    ]
  },
  {
    "\"thank you user93\" is the Text of comment": [
      576
    ]
  },
  {
    "\"A Lion\" is the DisplayName of user": [
      577
    ]
  },
  {
    "comment refers to Text": [
      577
    ]
  },
  {
    "\"Understanding what Dassault iSight is doing?\" is the Title of post": [
      578
    ]
  },
  {
    "\"How does gentle boosting differ from AdaBoost?\" is the Title of post": [
      579
    ]
  },
  {
    "comments refers to Text": [
      579
    ]
  },
  {
    "\"Necromancer\" is the Name of badge": [
      580
    ]
  },
  {
    "users refers to DisplayName": [
      580
    ]
  },
  {
    "'Open source tools for visualizing multi-dimensional data' is the Title of Post": [
      581
    ]
  },
  {
    "editor refers to DisplayName": [
      581
    ]
  },
  {
    "\"Vebjorn Ljosa\" is the DisplayName": [
      582
    ]
  },
  {
    "last edited refers to LastEditorUserId": [
      582
    ]
  },
  {
    "\"Yevgeny\" is the DisplayName": [
      583
    ]
  },
  {
    "edited refers to LastEditorUserId": [
      583
    ]
  },
  {
    "\"Why square the difference instead of taking the absolute value in standard deviation?\" is the Title of post": [
      584
    ]
  },
  {
    "About data means the title contains 'data'": [
      585
    ]
  },
  {
    "total bounty Amount refers to Sum(BountyAmount)": [
      585
    ]
  },
  {
    "bounty amount of 50 refers to BountyAmount = 50": [
      586
    ]
  },
  {
    "title mentioning variance refers to Title include 'variance'": [
      586
    ]
  },
  {
    "tagged as  'humor' refers to tag = '<humor>'": [
      587
    ]
  },
  {
    "comment of the post refers to Text": [
      587
    ]
  },
  {
    "average view count = AVG(ViewCount)": [
      587
    ]
  },
  {
    "lowest views refers to Min(Views)": [
      590
    ]
  },
  {
    "\"Supporter\" is the Name of badge": [
      591,
      623
    ]
  },
  {
    "in year 2011 refers to year(Date) = 2011": [
      591
    ]
  },
  {
    "more than 5 badges refers to Count (Name) > 5": [
      592
    ]
  },
  {
    "user refers to UserId": [
      592,
      593,
      595,
      605,
      610,
      613,
      621,
      622
    ]
  },
  {
    "\"Supporter\" and \"Teachers\" are both Name of badge": [
      593
    ]
  },
  {
    "'New York' is the Location": [
      593
    ]
  },
  {
    "having at least 1000 view refers to Views > = 1000": [
      595
    ]
  },
  {
    "user with the most comments refers to UserId where Max(Count(Id)": [
      596
    ]
  },
  {
    "\"India\" is the Location": [
      597
    ]
  },
  {
    "\"Teacher\" is the Name of badge": [
      597,
      614
    ]
  },
  {
    "student badges refers to badge's name = 'Student'": [
      598
    ]
  },
  {
    "during 2010 refers to Year(Date) = 2010": [
      598
    ]
  },
  {
    "during 2011 refers to Year(Date) = 2011": [
      598
    ]
  },
  {
    "percentage difference = Subtract (Divide(Count(Name where Year(Date) = 2010), Count (Name)) *100, Divide(Count(Name where Year(Date) = 2011), Count(Name)) * 100)": [
      598
    ]
  },
  {
    "post related refers to RelatedPostId": [
      600
    ]
  },
  {
    "popularity refers to ViewCount": [
      600
    ]
  },
  {
    "score more than 60 refers to Score > 60": [
      602
    ]
  },
  {
    "in 2011 refers to year (CreatinDate) = 2011": [
      603
    ]
  },
  {
    "creating more than 10 post refers to Count (UserId) > 10": [
      604
    ]
  },
  {
    "average of the up votes = Divide (Sum(UpVotes), Count (UserId))": [
      604
    ]
  },
  {
    "average age = Divide (Sum(Age), Count(UserId))": [
      604
    ]
  },
  {
    "\"Announcer\" is the Name of badge": [
      605
    ]
  },
  {
    "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'": [
      606,
      611,
      620
    ]
  },
  {
    "Positive comment refers to score > 60": [
      607
    ]
  },
  {
    "detailed content of the comment refers to Text": [
      608,
      617
    ]
  },
  {
    "created on 7/19/2010 7:16:14 PM refers to CreationDate = '2010-07-19 19:16:14.0'": [
      608
    ]
  },
  {
    "score of 10 refers to Score = 10": [
      609
    ]
  },
  {
    "post refers to Id": [
      609
    ]
  },
  {
    "\"Rochester, NY\" is the Location of user": [
      613
    ]
  },
  {
    "percentage = Divide (Count(UserId where it's \"Teacher\"), Count(UserId)) * 100": [
      614
    ]
  },
  {
    "\"Organizer\" is the Name of badge": [
      615
    ]
  },
  {
    "teenager refers to Age BETWEEN 13 AND 18": [
      615
    ]
  },
  {
    "percentage = Divide (Count(UserId where Age BETWEEN 13 AND 18), Count(UserId)) *100": [
      615
    ]
  },
  {
    "created on 7/19/2010 7:19:56 PM refers to CreationDate = '2010-07-19 19:19:56.0'": [
      616
    ]
  },
  {
    "created on 7/19/2010 7:37:33 PM CreationDate = 2010-07-19 19:37:33.0'": [
      617
    ]
  },
  {
    "\"Vienna, Austria\" is the Location": [
      618
    ]
  },
  {
    "Supporter is the Name of badge": [
      619
    ]
  },
  {
    "adult refers to Age BETWEEN 19 AND 65": [
      619
    ]
  },
  {
    "lowest reputation refers to Min(Reputation)": [
      621
    ]
  },
  {
    "\"Sharpie\" is the DisplayName of user": [
      622
    ]
  },
  {
    "elders refers to Age > 65": [
      623
    ]
  },
  {
    "name of user refers to DisplayName": [
      624
    ]
  },
  {
    "New York refers to Location": [
      625
    ]
  },
  {
    "YEAR(CreationDate) = 2010": [
      626
    ]
  },
  {
    "adult refers to user where Age BETWEEN 19 and 65": [
      627
    ]
  },
  {
    "users have the highest number of views refer to DisplayName where MAX(Views)": [
      628
    ]
  },
  {
    "DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010), COUNT(Id where YEAR(CreationDate) = 2011)) FROM votes": [
      629
    ]
  },
  {
    "DisplayName = 'John Salvatier'": [
      630
    ]
  },
  {
    "DisplayName = 'Daniel Vassallo'": [
      631
    ]
  },
  {
    "DisplayName = 'Harlan'": [
      632
    ]
  },
  {
    "most answers count refers to MAX(AnswerCount)": [
      633
    ]
  },
  {
    "post by slashnick refers to DisplayName = 'slashnick'": [
      633
    ]
  },
  {
    "Has higher popularity means the post has higher view count": [
      634
    ]
  },
  {
    "calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder'": [
      634
    ]
  },
  {
    "more than 4 votes refer to PostId > 4": [
      635
    ]
  },
  {
    "DisplayName = 'Matt Parker'": [
      635
    ]
  },
  {
    "Negative comment refers to score < 60": [
      636
    ]
  },
  {
    "DisplayName = 'Neil McGuigan'": [
      636
    ]
  },
  {
    "used by Mark Meckes refers to DisplayName = 'Mark Meckes'": [
      637
    ]
  },
  {
    "Doen't have comments refers to CommentCount = 0": [
      637
    ]
  },
  {
    "name of users refers to DisplayName": [
      638
    ]
  },
  {
    "the Organizer Badges refer to badges where Name = 'Organizer'": [
      638
    ]
  },
  {
    "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage": [
      639
    ]
  },
  {
    "R language refers to tagname = 'r'": [
      639
    ]
  },
  {
    "calculation = SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'))": [
      640
    ]
  },
  {
    "Commentator is the name of the badge": [
      641
    ]
  },
  {
    "year(Date) = 2014": [
      641
    ]
  },
  {
    "created on 21st July, 2010 refers to CreationDate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59'": [
      642
    ]
  },
  {
    "the highest in views refers to MAX(Views)": [
      643
    ]
  },
  {
    "Title = 'Detecting a given face in a database of facial images'": [
      644
    ]
  },
  {
    "negative comments refer to Score < 60": [
      645
    ]
  },
  {
    "positive comments refer to Score > 60": [
      646
    ]
  },
  {
    "received in 2011 refers to year(Date) = 2011": [
      647
    ]
  },
  {
    "favorite count of more than 150 refers to FavoriteCount > 150": [
      648
    ]
  },
  {
    "Outliers is the name of the badge": [
      650
    ]
  },
  {
    "Samuel refers to UserDisplayName": [
      652
    ]
  },
  {
    "YEAR(CreationDate) = 2013 relates to PostId": [
      652
    ]
  },
  {
    "YEAR(Date) = 2013 relates to the badge": [
      652
    ]
  },
  {
    "Higher view count means the post has higher popularity": [
      653,
      658
    ]
  },
  {
    "the most popular post refers to MAX(ViewCount)": [
      653
    ]
  },
  {
    "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing'": [
      654
    ]
  },
  {
    "Title = 'What are principal component scores?'": [
      655
    ]
  },
  {
    "If the parent id is not null, the post is the child post": [
      656
    ]
  },
  {
    "the highest score refers to MAX(Score)": [
      656,
      679,
      687
    ]
  },
  {
    "vote type of 8 refers to VoteTypeId = 8": [
      657
    ]
  },
  {
    "the highest bounty amount refers to MAX(BountyAmount)": [
      657
    ]
  },
  {
    "the highest popularity refers to MAX(ViewCount)": [
      658
    ]
  },
  {
    "post count between 5,000 to 7,000 refers to Count BETWEEN 5000 and 7000": [
      659
    ]
  },
  {
    "the most valuable post refers to MAX(FavoriteCount)": [
      660,
      666
    ]
  },
  {
    "How old describes age": [
      661
    ]
  },
  {
    "the most influential refers to user where MAX(Reputation)": [
      661
    ]
  },
  {
    "created in 2012 refers YEAR(CreationDate) = 2011": [
      662
    ]
  },
  {
    "BountyAmount = 50": [
      662
    ]
  },
  {
    "the youngest user refers to MIN(Age)": [
      663,
      670
    ]
  },
  {
    "on 2010-07-19 refers to LasActivityDate LIKE '2010-07-19%'": [
      664
    ]
  },
  {
    "calculation = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010 and AnswerCount < = 2), 12)": [
      665
    ]
  },
  {
    "user 1465 refers to UserId = 1465": [
      666
    ]
  },
  {
    "the oldest post link refers to MIN(CreaionDate)": [
      667
    ]
  },
  {
    "highest amount of badges refers to MAX(COUNT(Name))": [
      668
    ]
  },
  {
    "DisplayName = 'chl'": [
      669
    ]
  },
  {
    "cast its first vote refers to MIN(CreationDate)": [
      669
    ]
  },
  {
    "first post refers to MIN(CreaionDate)": [
      670
    ]
  },
  {
    "Autobiographer is the name of the badge": [
      671
    ]
  },
  {
    "acquired the first refers to MIN(Date)": [
      671
    ]
  },
  {
    "favorite amount of 4 or more refers to FavoriteCount > = 4": [
      672
    ]
  },
  {
    "Location = 'United Kingdom'": [
      672
    ]
  },
  {
    "average number of posts voted refers to AVG(PostId) FROM votes": [
      673
    ]
  },
  {
    "the oldest users refer to MAX(Age)": [
      673
    ]
  },
  {
    "the highest reputation refers to MAX(Reputation)": [
      674
    ]
  },
  {
    "reputations are higher than 2000 refer to Reputation > 2000": [
      675
    ]
  },
  {
    "number of views is higher than 1000 refers to Views > 1000": [
      675
    ]
  },
  {
    "adults refer to users where Age BETWEEN 19 and 65": [
      676
    ]
  },
  {
    "DisplayName = 'Jay Stevens'": [
      677
    ]
  },
  {
    "in 2010 refers to YEAR(CreationDate) = 2010": [
      677
    ]
  },
  {
    "DisplayName = 'Harvey Motulsky'": [
      678
    ]
  },
  {
    "the most views refer to MAX(ViewCount)": [
      678
    ]
  },
  {
    "owner's name refers to DisplayName": [
      679
    ]
  },
  {
    "DisplayName = 'Stephen Turner'": [
      680
    ]
  },
  {
    "had over 20000 views in 2011 refers to ViewCount > 20000 where YEAR(CreationDate) = 2011": [
      681
    ]
  },
  {
    "the most valuable post in 2015 refers to MAX(FavoriteCount) where year(CreationDate) = 2010": [
      682
    ]
  },
  {
    "percentage = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2011 and Reputation > 1000), COUNT(Id) ) * 100": [
      683
    ]
  },
  {
    "DIVIDE(COUNT(Id where Age BETWEEN 13 and 18), COUNT(Id)) as percentage": [
      684
    ]
  },
  {
    "total views refer to ViewCount": [
      685
    ]
  },
  {
    "Name the user refers to DisplayName": [
      685
    ]
  },
  {
    "post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets'": [
      685
    ]
  },
  {
    "views above average refer to ViewCount > AVG(ViewCount)": [
      686
    ]
  },
  {
    "have been viewed over 35000 times refers to ViewCount > 35000": [
      688
    ]
  },
  {
    "received no comments refers to CommentCount = 0": [
      688
    ]
  },
  {
    "last to edit refers to MAX(LastEditDate)": [
      689
    ]
  },
  {
    "the latest badge refers to Name FROM badges where MAX(Date)": [
      690
    ]
  },
  {
    "adult users refer to Age BETWEEN 19 and 65": [
      691
    ]
  },
  {
    "over 5000 upvotes refer to UpVotes > 5000": [
      691
    ]
  },
  {
    "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon'": [
      692
    ]
  },
  {
    "the latest created user account refers to MAX(CreationDate)": [
      693
    ]
  },
  {
    "the latest comment refers to MAX(CreationDate)": [
      694
    ]
  },
  {
    "Citizen Patrol' is the name of the badge": [
      695
    ]
  },
  {
    "tag specified as 'careers' refers to TagName = 'careers'": [
      696
    ]
  },
  {
    "DisplayName = 'IrishStat'": [
      699
    ]
  },
  {
    "when create his or her account refers to CreationDate": [
      699
    ]
  },
  {
    "bounty amount over 30 refers to BountyAmount > = 30": [
      700
    ]
  },
  {
    "The higher reputation the user has the more influence": [
      701
    ]
  },
  {
    "percentage = DIVIDE(COUNT(stats_posts.Id where Score > 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation))": [
      701
    ]
  },
  {
    "score less than 20 refers to Score < 20": [
      702
    ]
  },
  {
    "ID below 15 refers to Id < 15": [
      703
    ]
  },
  {
    "have 20 count of posts and below refers to Count < = 20": [
      703
    ]
  },
  {
    "tag named sample refers to TagName = 'sample'": [
      704
    ]
  },
  {
    "Text = 'fine, you win :)'": [
      705
    ]
  },
  {
    "about linear regression refers to Title contains 'linear regression'": [
      706
    ]
  },
  {
    "views ranging from 100 to 150 refers to ViewCount BETWEEN 100 and 150": [
      707
    ]
  },
  {
    "comment with the highest score refers to Text where MAX(Score)": [
      707
    ]
  },
  {
    "commented with webiste refers to the value contains 'http://'": [
      708
    ]
  },
  {
    "view count lower than 5 refers to ViewCount < 5": [
      709
    ]
  },
  {
    "in posts with 1 comment refers to CommentCount = 1": [
      710
    ]
  },
  {
    "Title = 'Group differences on a five point Likert item'": [
      712
    ]
  },
  {
    "commented \"R is also lazy evaluated.\" refers to Text of the comment": [
      713
    ]
  },
  {
    "comments refer to Text": [
      714
    ]
  },
  {
    "username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky'": [
      714
    ]
  },
  {
    "DownVotes = 0": [
      715
    ]
  },
  {
    "Score BETWEEN 1 and 5": [
      715
    ]
  },
  {
    "percentage = DIVIDE(COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10))*100, (COUNT(UserId where Score BETWEEN 5 and 10))": [
      716
    ]
  },
  {
    "3-D Man refers to superhero_name = '3-D Man'": [
      717
    ]
  },
  {
    "superpowers refers to power_name": [
      717,
      749,
      751,
      764,
      807,
      811,
      821
    ]
  },
  {
    "super power of \"Super Strength\" refers to power_name = 'Super Strength'": [
      718,
      719,
      730
    ]
  },
  {
    "a height of over 200cm refers to height_cm > 200": [
      719
    ]
  },
  {
    "15 super powers refers to COUNT(full_name) > 15": [
      720
    ]
  },
  {
    "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id": [
      721,
      723,
      724
    ]
  },
  {
    "Apocalypse refers to superhero_name = 'Apocalypse'": [
      722
    ]
  },
  {
    "colour of skin refers to colour where skin_colour_id = colour.id": [
      722
    ]
  },
  {
    "super power of \"Agility\" refers to power_name = 'Agility'": [
      723,
      724
    ]
  },
  {
    "blond hair refers to colour = 'Blond' and hair_colour_id = colour.id": [
      724
    ]
  },
  {
    "published by Marvel Comics refers to publisher_name = 'Marvel Comics'": [
      725,
      726,
      743
    ]
  },
  {
    "name refers to superhero_name": [
      726
    ]
  },
  {
    "the tallest hero refers to MAX(height_cm)": [
      726
    ]
  },
  {
    "the publisher refers to publisher_name": [
      727
    ]
  },
  {
    "Sauron refers to superhero_name = 'Sauron'": [
      727
    ]
  },
  {
    "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'": [
      728,
      730
    ]
  },
  {
    "most common color refers to COUNT(superhero.id) DESC": [
      728
    ]
  },
  {
    "superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'": [
      729
    ]
  },
  {
    "average height of the superheroes refers to AVG(height_cm)": [
      729
    ]
  },
  {
    "superheroes that DC Comics published refers to publisher_name = 'DC Comics'": [
      731
    ]
  },
  {
    "the slowest superhero refers to attribute_name = 'Speed' where MIN(attribute_value)": [
      732
    ]
  },
  {
    "publisher refers to publisher_name": [
      732,
      773,
      798
    ]
  },
  {
    "gold-eyed refers to colour = 'Gold' where eye_colour_id = colour.id": [
      733
    ]
  },
  {
    "superheroes that Marvel Comics published refers to publisher_name = 'Marvel Comics'": [
      733
    ]
  },
  {
    "Blue Beetle II refers to superhero_name = 'Blue Beetle II'": [
      734
    ]
  },
  {
    "superheroes with blonde hair refers to colour = 'Blond' where hair_colour_id = colour.id": [
      735
    ]
  },
  {
    "the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'": [
      736
    ]
  },
  {
    "Copycat is the superhero_name": [
      737
    ]
  },
  {
    "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50": [
      738
    ]
  },
  {
    "name of superheroes refers to refers to superhero_name": [
      739
    ]
  },
  {
    "the power of death touch refers to power_name = 'Death Touch'": [
      739
    ]
  },
  {
    "female refers to gender = 'Female'": [
      740,
      750,
      775,
      823,
      834
    ]
  },
  {
    "strength value of 100 refers to attribute_name = 'Strength' AND attribute_value = 100": [
      740
    ]
  },
  {
    "name of the superhero refers to superhero_name": [
      741
    ]
  },
  {
    "superhero that has the most powers refers to MAX(COUNT(superhero_name))": [
      741
    ]
  },
  {
    "vampire superheroes refers to race = 'Vampire'": [
      742
    ]
  },
  {
    "superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'": [
      743
    ]
  },
  {
    "calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad)": [
      743
    ]
  },
  {
    "count(id)), 100)": [
      743
    ]
  },
  {
    "DC refers to publisher_name = 'DC Comics'": [
      744,
      829
    ]
  },
  {
    "Marvel Comics refers to publisher_name = 'Marvel Comics'": [
      744,
      788,
      823,
      829,
      835
    ]
  },
  {
    "calculation = SUBTRACT(SUM(publisher_name = 'Marvel Comics'), SUM(publisher_name = 'DC Comics'))": [
      744
    ]
  },
  {
    "Star Trek is the publisher_name": [
      745
    ]
  },
  {
    "average attribute value of all superheroes refers to AVG(attribute_value)": [
      746
    ]
  },
  {
    "superheroes without full name refers to full_name IS NULL": [
      747
    ]
  },
  {
    "eye colour refers to colour where eye_colour_id = colour.id": [
      748,
      759
    ]
  },
  {
    "Deathlok refers to superhero_name = 'Deathlok'": [
      749
    ]
  },
  {
    "average weight refers to AVG(weight_kg)": [
      750
    ]
  },
  {
    "male refers to gender = 'Male'": [
      751
    ]
  },
  {
    "alien superheroes refers to race = 'Alien'": [
      752
    ]
  },
  {
    "name of superhero refers to superhero_name": [
      752,
      804
    ]
  },
  {
    "height from 170 to 190 refers to height_cm BETWEEN 170 AND 190": [
      753
    ]
  },
  {
    "no eye color refers to colour = 'No Colour'": [
      753
    ]
  },
  {
    "superpower refers to hero_power": [
      754
    ]
  },
  {
    "Demi-God superheroes refers to race = 'Demi-God'": [
      755
    ]
  },
  {
    "bad superheroes refers to alignment_id = Bad": [
      756
    ]
  },
  {
    "weighed 169 kg refers to weight_kg = 169": [
      757
    ]
  },
  {
    "185 cm tall refers to height_cm = 185": [
      758
    ]
  },
  {
    "human superhero refers to race = 'human'": [
      758
    ]
  },
  {
    "hair colour refers to colour where hair_colour_id = colour.id": [
      758
    ]
  },
  {
    "the heaviest superhero refers to MAX(weight_kg)": [
      759
    ]
  },
  {
    "height between 150 to 180 refers to height_cm BETWEEN 150 AND 180": [
      760
    ]
  },
  {
    "heroes published by Marvel Comics refers to publisher_name = 'Marvel Comics'": [
      760
    ]
  },
  {
    "calculation = MULTIPLY(DIVIDE(SUM(publisher.id = 13)), COUNT(publisher.id), 100)": [
      760
    ]
  },
  {
    "super hero names refers to superhero_name": [
      761
    ]
  },
  {
    "male superheros refers to gender = 'Male'": [
      761
    ]
  },
  {
    "Calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)": [
      761
    ]
  },
  {
    "power that superheroes have the most refers to MAX(COUNT(power_name))": [
      762
    ]
  },
  {
    "Abomination refers to superhero_name = 'Abomination'": [
      763,
      792,
      831
    ]
  },
  {
    "heroes with ID 1 refers to hero_id = 1": [
      764
    ]
  },
  {
    "stealth power refers to power_name = 'stealth'": [
      765
    ]
  },
  {
    "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength'": [
      766
    ]
  },
  {
    "average = DIVIDE(COUNT(superhero.id), SUM(skin_colour_id = 1))": [
      767
    ]
  },
  {
    "no skin colour refers to skin_colour_id WHERE colour.id = 1": [
      767
    ]
  },
  {
    "published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics'": [
      768,
      769,
      772
    ]
  },
  {
    "which superhero refers to superhero_name": [
      769,
      773
    ]
  },
  {
    "most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'": [
      769
    ]
  },
  {
    "eye colour refers to colour.colour where eye_colour_id = colour.id": [
      770,
      806,
      831,
      844
    ]
  },
  {
    "Abraham Sapien is the full name of superhero": [
      770
    ]
  },
  {
    "name of superheroes refers to superhero_name": [
      771
    ]
  },
  {
    "flight power refers to power_name = 'Flight'": [
      771
    ]
  },
  {
    "eyes refers to eye_colour_id": [
      772
    ]
  },
  {
    "hair refers to hair_colour_id": [
      772
    ]
  },
  {
    "skin colour refers to skin_colour_id": [
      772
    ]
  },
  {
    "female superheroes refers to gender = 'Female'": [
      772
    ]
  },
  {
    "the same eyes, hair and skin colour refers to hair_colour_id = skin_colour_id AND hair_colour_id = eye_colour_id": [
      773
    ]
  },
  {
    "group refers to race": [
      774
    ]
  },
  {
    "A-Bomb refers to superhero_name = 'A-Bomb'": [
      774
    ]
  },
  {
    "percentage = MULTIPLY(DIVIDE(SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female')), 100)": [
      775
    ]
  },
  {
    "blue refers to the color = 'Blue' WHERE skin_colour_id = colour.id": [
      775
    ]
  },
  {
    "hero name refers to superhero_name": [
      776
    ]
  },
  {
    "Charles Chandler is the full name of superhero": [
      776,
      790,
      833
    ]
  },
  {
    "Agent 13 hero refers to superhero_name = 'Agent 13'": [
      777
    ]
  },
  {
    "adaptation power refers to power_name = 'Adaptation'": [
      778
    ]
  },
  {
    "Amazo hero refers to superhero_name = 'Amazo'": [
      779
    ]
  },
  {
    "Hunter Zolomon is the full name of superhero": [
      780
    ]
  },
  {
    "list the powers refers to power_name": [
      780
    ]
  },
  {
    "heights of the heroes refers to height_cm": [
      781
    ]
  },
  {
    "eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id": [
      781
    ]
  },
  {
    "heroes' names refers to superhero_name": [
      782
    ]
  },
  {
    "eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black'": [
      782
    ]
  },
  {
    "skin colours are gold refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id": [
      783
    ]
  },
  {
    "vampire heroes refers to race = 'Vampire'": [
      784
    ]
  },
  {
    "names of superheroes refers to superhero_name": [
      785,
      816
    ]
  },
  {
    "neutral alignment refers to alignment = 'Neutral'": [
      785
    ]
  },
  {
    "highest attribute value in strength refers to MAX(attribute_value) WHERE attribute_name = 'Strength'": [
      786
    ]
  },
  {
    "Cameron Hicks refers to superhero_name = 'Cameron Hicks'": [
      787
    ]
  },
  {
    "percent = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100)": [
      788
    ]
  },
  {
    "female heroes refers to gender = 'Female'": [
      788
    ]
  },
  {
    "average = AVG(weight_kg)": [
      789
    ]
  },
  {
    "aliens refers to race = 'Alien'": [
      789
    ]
  },
  {
    "difference = SUBTRACT(SUM(weight_kg WHERE full_name = 'Emil Blonsky'), SUM(weight_kg WHERE full_name = 'Charles Chandler'))": [
      790
    ]
  },
  {
    "Emil Blonsky is the full name of superhero": [
      790
    ]
  },
  {
    "average = DIVIDE(SUM(height_cm), COUNT(all heros))": [
      791
    ]
  },
  {
    "superpower refers to power_name": [
      792
    ]
  },
  {
    "race \"god/eternal\" refers to race_id = 21": [
      793
    ]
  },
  {
    "male refers to gender.id = 1": [
      793
    ]
  },
  {
    "which hero refers to superhero_name": [
      794
    ]
  },
  {
    "fastest refers to MAX(attribute_value) WHERE attribute_name = 'Speed'": [
      794
    ]
  },
  {
    "neutral alignment refers to alignment_id = 3": [
      795
    ]
  },
  {
    "3-D Man is the superhero_name. attributes refers to attribute_name": [
      796
    ]
  },
  {
    "values refers to attribute_value": [
      796
    ]
  },
  {
    "which superheroes refers to superhero_name": [
      797
    ]
  },
  {
    "blue eyes refers to color = 'Blue' and color.id = eye_colour_id": [
      797
    ]
  },
  {
    "brown hair refers to color = 'Brown' and color.id = hair_colour_id": [
      797
    ]
  },
  {
    "Hawkman refers to superhero_name = 'Hawkman'": [
      798
    ]
  },
  {
    "Karate Kid refers to superhero_name = 'Karate Kid'": [
      798
    ]
  },
  {
    "Speedy refers to superhero_name = 'Speedy'": [
      798
    ]
  },
  {
    "didn't have any publisher refers to publisher.id = 1": [
      799
    ]
  },
  {
    "percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE color = 'Blue'), COUNT(superhero_name)), 100.0)": [
      800
    ]
  },
  {
    "blue eyes refers to color = 'Blue' and color.id =  eye_colour_id = 7": [
      800
    ]
  },
  {
    "ratio = DIVIDE(SUM(gender_id = 1) / SUM(gender_id = 2))": [
      801
    ]
  },
  {
    "male superheroes refers to gender = 'Female'": [
      801
    ]
  },
  {
    "female superheroes refers to gender = 'Male'": [
      801
    ]
  },
  {
    "who refers to superhero_name": [
      802
    ]
  },
  {
    "tallest superhero refers to MAX(height_cm)": [
      802,
      832
    ]
  },
  {
    "power ID refers to superpower.id": [
      803
    ]
  },
  {
    "cryokinesis refers to power_name = 'cryokinesis'": [
      803
    ]
  },
  {
    "superhero ID 294 refers to superhero.id = 294": [
      804
    ]
  },
  {
    "missing weight refers to weight_kg = 0 OR weight_kg = NULL": [
      805
    ]
  },
  {
    "Karen Beecher-Duncan is the full name of superhero": [
      806
    ]
  },
  {
    "Helen Parr is the full name of superhero": [
      807
    ]
  },
  {
    "weighs 108kg refers to weight_kg = 108": [
      808
    ]
  },
  {
    "188cm tall refers to height_cm = 188": [
      808
    ]
  },
  {
    "superhero ID 38 refers to superhero.id = 38": [
      809
    ]
  },
  {
    "maximum attribute value refers to MAX(attribute_value)": [
      810
    ]
  },
  {
    "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id": [
      812
    ]
  },
  {
    "Name of superheroes refers to superhero_name": [
      812
    ]
  },
  {
    "average = AVG(attribute_value)": [
      813
    ]
  },
  {
    "neutral superheroes refers to alignment_id = 3": [
      813
    ]
  },
  {
    "skin colour refers to colour.colour where skin_colour_id = colour.id": [
      814
    ]
  },
  {
    "100 attribute value refers to attribute_value = 100": [
      814
    ]
  },
  {
    "good refers to alignment.id = 1": [
      815
    ]
  },
  {
    "female refers to gender.id = 2": [
      815,
      818
    ]
  },
  {
    "attribute value between 75 to 80 refers to attribute_value BETWEEN 75 AND 80": [
      816
    ]
  },
  {
    "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id": [
      817
    ]
  },
  {
    "male refers to gender = 'male'": [
      817
    ]
  },
  {
    "bad superheroes refers to alignment.id = 2": [
      818
    ]
  },
  {
    "percentage = MULTIPLY(DIVIDE(SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2)), 100.0)": [
      818
    ]
  },
  {
    "missing weight data refers to weight_kg = 0 OR T1.weight_kg = NULL": [
      819
    ]
  },
  {
    "difference = SUBTRACT(SUM(colour.id = 7), SUM(colour.id = 1))": [
      819
    ]
  },
  {
    "blue eyes refers to eye_colour_id WHERE colour.id = 7": [
      819
    ]
  },
  {
    "no eye color refers to eye_colour_id WHERE colour.id = 1": [
      819
    ]
  },
  {
    "how strong refers to attribute_value WHERE attribute_name = 'Strength'": [
      820
    ]
  },
  {
    "the Hulk refers to superhero_name = 'Hulk'": [
      820
    ]
  },
  {
    "Ajax refers to superhero_name = 'Ajax'": [
      821
    ]
  },
  {
    "green-skinned refers to colour.colour = 'Green' WHERE skin_colour_id = colour.id": [
      822
    ]
  },
  {
    "villains refers to alignment = 'Bad'": [
      822
    ]
  },
  {
    "superheroes refers to superhero_name": [
      824
    ]
  },
  {
    "can control wind refers to power_name = 'Wind Control'": [
      824
    ]
  },
  {
    "ability of Phoenix Force refers to power_name = 'Phoenix Force'": [
      825
    ]
  },
  {
    "heaviest refers to MAX(weight_kg)": [
      826
    ]
  },
  {
    "DC Comics refers to publisher_name = 'DC Comics'": [
      826
    ]
  },
  {
    "superhero refers to superhero_name": [
      826
    ]
  },
  {
    "average = AVG(height_cm)": [
      827
    ]
  },
  {
    "non-human superhero refers to race <> 'Human'": [
      827
    ]
  },
  {
    "Dark Horse Comics refers to publisher_name = 'Dark Horse Comics'": [
      827
    ]
  },
  {
    "fastest refers to attribute_value = 100 WHERE attribute_name = 'Speed'": [
      828
    ]
  },
  {
    "difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'))": [
      829
    ]
  },
  {
    "weakest attribute refers to attribute_name WHERE MIN(attribute_value)": [
      830
    ]
  },
  {
    "Black Panther refers to superhero_name = 'Black Panther'": [
      830
    ]
  },
  {
    "name the superhero refers to superhero_name": [
      833
    ]
  },
  {
    "created by George Lucas refers to publisher_name = 'George Lucas'": [
      834
    ]
  },
  {
    "percentage = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'George Lucas'), COUNT(publisher_name = 'George Lucas')), 100.0)": [
      834
    ]
  },
  {
    "percentage = MULTIPLY(DIVIDE(SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100.0)": [
      835
    ]
  },
  {
    "good superheroes refers to alignment = 'Good'": [
      835
    ]
  },
  {
    "have John as their first name refers to full_name LIKE 'John%'": [
      836
    ]
  },
  {
    "lowest attribute value refers to MIN(attribute_value)": [
      837
    ]
  },
  {
    "weight less than 100 refers to weight_kg < 100": [
      839
    ]
  },
  {
    "weight refers to weight_kg": [
      841
    ]
  },
  {
    "superhero ID 40 refers to superhero.id = 40": [
      841
    ]
  },
  {
    "hero ID refers to superhero.id": [
      843
    ]
  },
  {
    "have intelligence as their power refers to power_name = 'Intelligence'": [
      843
    ]
  },
  {
    "Blackwulf refers to superhero_name = 'Blackwulf'": [
      844
    ]
  },
  {
    "power of superheroes refers to power_name": [
      845
    ]
  },
  {
    "height greater than 80% of the average height of all superheroes = height_cm > MULTIPLY(AVG(height_cm), 0.8)": [
      845
    ]
  },
  {
    "driver reference name refers to driverRef": [
      846
    ]
  },
  {
    "first qualifying period refers to q1": [
      846
    ]
  },
  {
    "drivers who are eliminated in the first qualifying period refers to 5 drivers with MAX(q1)": [
      846
    ]
  },
  {
    "race number refers to raceId": [
      846,
      847,
      858,
      859,
      860,
      861,
      863,
      865,
      866,
      869,
      870,
      871,
      872,
      873,
      875,
      877,
      878,
      880
    ]
  },
  {
    "second qualifying period refers to q2": [
      847
    ]
  },
  {
    "best lap time refers to MIN(q2)": [
      847
    ]
  },
  {
    "Shanghai is a name of location": [
      848
    ]
  },
  {
    "introduction of races refers to url": [
      849
    ]
  },
  {
    "Circuit de Barcelona-Catalunya is a name of circuit": [
      849
    ]
  },
  {
    "Germany is a name of country": [
      850
    ]
  },
  {
    "Renault is a name of constructor": [
      851
    ]
  },
  {
    "Spain is a name of country": [
      853
    ]
  },
  {
    "coordinate position/location refers to lat, lng": [
      854,
      857
    ]
  },
  {
    "circuits for Australian grand prix refers to races.name = 'Australian Grand Prix'": [
      854
    ]
  },
  {
    "information about races refers to url": [
      855
    ]
  },
  {
    "Abu Dhabi Grand Prix refers to races.name = 'Abu Dhabi Grand Prix'": [
      857
    ]
  },
  {
    "Bruno Senna refers to the full name of the driver": [
      859
    ]
  },
  {
    "Full name of the driver refers to drivers.forename and drivers.surname": [
      859,
      892,
      895,
      897,
      902,
      904,
      906,
      930,
      933,
      988
    ]
  },
  {
    "finished 0:0M:SS in the Q3 refers to q3 LIKE 'M:SS%'": [
      861
    ]
  },
  {
    "Bahrain Grand Prix refers to races.name = 'Bahrain Grand Prix'": [
      862
    ]
  },
  {
    "drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL)": [
      862,
      865
    ]
  },
  {
    "game and race are synonyms": [
      864,
      876
    ]
  },
  {
    "drivers who finished the race should have record in time": [
      864
    ]
  },
  {
    "date of birth refers to drivers.dob": [
      865,
      898,
      915,
      981
    ]
  },
  {
    "The larger the birthday value, the younger the person is, and vice versa": [
      865,
      898,
      915,
      981,
      1078,
      1102,
      1166,
      1168,
      1209,
      1238,
      1281
    ]
  },
  {
    "player and driver are synonyms": [
      866
    ]
  },
  {
    "the lap time of 0:0M:SS refers to lapTime.time LIKE 'M:SS%'": [
      866
    ]
  },
  {
    "introduction website of the drivers refers to url": [
      866
    ]
  },
  {
    "fastest lap speed refers to MAX(fastestLapSpeed)": [
      867
    ]
  },
  {
    "location coordinates refers to (lat, lng)": [
      868,
      910,
      946
    ]
  },
  {
    "Malaysian Grand Prix refers to races.name = 'Malaysian Grand Prix'": [
      868
    ]
  },
  {
    "constructor which got the highest point refers to MAX(constructorResults.points)": [
      869
    ]
  },
  {
    "introduction website of the constructor refers to url": [
      869
    ]
  },
  {
    "had the Q3 time as 0:0M:SS refers to q3 LIKE 'M:SS%'": [
      872
    ]
  },
  {
    "finished second refers to position = 2": [
      874
    ]
  },
  {
    "the season page refers to url": [
      875
    ]
  },
  {
    "drivers who didn't finish the race should have record in time": [
      876
    ]
  },
  {
    "drivers who finished the race refers to time has value": [
      877
    ]
  },
  {
    "the youngest is a driver where MAX(dob)": [
      877
    ]
  },
  {
    "the best lap time refers to MIN(time)": [
      878
    ]
  },
  {
    "the fastest lap speed refers to (MAX) fastestLapSpeed": [
      879
    ]
  },
  {
    "Paul di Resta refers to the full name of the driver": [
      880
    ]
  },
  {
    "Full name of the driver refers to drivers.forename ='Paul' and drivers.surname = 'di Resta'": [
      880
    ]
  },
  {
    "percentage = DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)) * 100 , (fastestLapSpeed(raceId = 853))": [
      880
    ]
  },
  {
    "DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage": [
      881
    ]
  },
  {
    "in 1983/7/16 refers to when date = '1983-07-16'": [
      881
    ]
  },
  {
    "the first race refers to race happened in min(year)": [
      882
    ]
  },
  {
    "earliest recorded year and month refers to year = year(min(date)) and month = month(min(date))": [
      884
    ]
  },
  {
    "the last round refers to max(round)": [
      885
    ]
  },
  {
    "the most number of races refers to max(round)": [
      886
    ]
  },
  {
    "not hosted means not in": [
      887
    ]
  },
  {
    "the first refers to min(year)": [
      888
    ]
  },
  {
    "the last refers to max(year)": [
      889
    ]
  },
  {
    "British Grand Prix is the name of race": [
      890
    ]
  },
  {
    "British refers to the United Kindom": [
      890
    ]
  },
  {
    "the most points scored refers to max(points)": [
      892
    ]
  },
  {
    "the best lap time refers to min(milliseconds)": [
      894
    ]
  },
  {
    "List the driver refers to drivers.forename and drivers.surname": [
      894
    ]
  },
  {
    "List the race refers to races.name": [
      894
    ]
  },
  {
    "average lap time = AVG(milliseconds)": [
      895
    ]
  },
  {
    "'Lewis Hamilton' refers to the full name of the driver": [
      895
    ]
  },
  {
    "'Malaysian Grand Prix' refers to races.name = 'Malaysian Grand Prix'": [
      895
    ]
  },
  {
    "percentage = DIVIDE(COUNT(raceId) where surname = 'Hamilton' and position>1), (COUNT(raceId) where surname = 'Hamilton')": [
      896
    ]
  },
  {
    "since 2010 refers to year >= 2010": [
      896
    ]
  },
  {
    "the most winning refers to MAX(COUNT(wins))": [
      897
    ]
  },
  {
    "average point scores refers to MAX(points)": [
      897
    ]
  },
  {
    "Japanese refers to nationality = 'Japanese'": [
      898
    ]
  },
  {
    "age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob)": [
      898
    ]
  },
  {
    "from year 1990 to 2000 refers to year(date) between 1990 and 2000": [
      899
    ]
  },
  {
    "in September 2005 refers to MONTH(date) = 9 and YEAR(date) = 2005": [
      901
    ]
  },
  {
    "Alex Yoong refers to the full name of the driver": [
      902,
      904
    ]
  },
  {
    "track number less than 10 refers to position < 20": [
      902
    ]
  },
  {
    "win from races refers to max(points)": [
      903
    ]
  },
  {
    "fastest lap refers to min(milliseconds)": [
      904
    ]
  },
  {
    "average points = AVG(points where year = 2000)": [
      905
    ]
  },
  {
    "first race refers to min(Year)": [
      906
    ]
  },
  {
    "Lewis Hamiltonrefers to the full name of the driver": [
      906
    ]
  },
  {
    "European Grand Prix races refers to races.name = 'European Grand Prix'": [
      909
    ]
  },
  {
    "percentage = divide(COUNT(races where country = Germany and name = 'Europearn Grand Prix'),COUNT(races where name = 'Europearn Grand Prix'))*100": [
      909
    ]
  },
  {
    "Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'": [
      910
    ]
  },
  {
    "higher latitude refers to max(lat)": [
      911
    ]
  },
  {
    "reference name refers to circuitRef": [
      912
    ]
  },
  {
    "Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'": [
      912
    ]
  },
  {
    "highest altitude refers to max(alt)": [
      913
    ]
  },
  {
    "don't have a code refers to code is null": [
      914
    ]
  },
  {
    "Italian refers to nationality = 'italian'": [
      916
    ]
  },
  {
    "website refers to url": [
      917,
      990
    ]
  },
  {
    "reference name refers to driverRef": [
      918,
      928,
      968
    ]
  },
  {
    "more information refers to url": [
      921
    ]
  },
  {
    "link of the website refers to url": [
      925
    ]
  },
  {
    "fastest lap time ever refers to min(fastestLapTime)": [
      926
    ]
  },
  {
    "Canadian Grand Prix refers to races.name = 'Canadian Grand Prix'": [
      928
    ]
  },
  {
    "rank the highest refers to min(rank)": [
      930
    ]
  },
  {
    "Lewis Hamilton refers to the full name of the driver": [
      930,
      933
    ]
  },
  {
    "the fastest lap speed among all refers to max(fastestLapSpeed)": [
      931
    ]
  },
  {
    "Spanish Grand Prix refers to races.name = 'Spanish Grand Prix'": [
      931
    ]
  },
  {
    "final rank refers to positionOrder": [
      933
    ]
  },
  {
    "Chinese Grand Prix refers to races.name = 'Chinese Grand Prix'": [
      933,
      937
    ]
  },
  {
    "the no. 4 grid formation refers to grid = 4": [
      934
    ]
  },
  {
    "managed to finish the race refers to time is not null": [
      935
    ]
  },
  {
    "finish time refers to time": [
      937
    ]
  },
  {
    "only champion's finished time is represented by 'HH:MM:SS.mmm'": [
      938,
      944,
      955
    ]
  },
  {
    "where can I know more refers to url": [
      938
    ]
  },
  {
    "from the UN refers to nationality = 'British'": [
      939
    ]
  },
  {
    "COUNT(raceID) > 0 reveals that this driver participated in races": [
      940
    ]
  },
  {
    "drivers who finished the race refers to time has value.": [
      940
    ]
  },
  {
    "average fastest lap time = avg(fastestLapTime)": [
      942
    ]
  },
  {
    "The time is recorded on 'MM:SS.mmm'": [
      942
    ]
  },
  {
    "completing all the laps refers to time is not null": [
      943
    ]
  },
  {
    "rate = divide(COUNT(raceID where time is not null), COUNT(raceID))": [
      943
    ]
  },
  {
    "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100": [
      944
    ]
  },
  {
    "last driver finished time = incremental time + champion time": [
      944
    ]
  },
  {
    "finished the game refers to time is not null": [
      944,
      955
    ]
  },
  {
    "Australia is the country": [
      945
    ]
  },
  {
    "Melbourne is the location of circuit": [
      945
    ]
  },
  {
    "the US refers to country = 'USA'": [
      946
    ]
  },
  {
    "born after 1980 refers to year (dob) >1980": [
      947
    ]
  },
  {
    "maximum points = MAX(points)": [
      948
    ]
  },
  {
    "British is a nationality": [
      948
    ]
  },
  {
    "race at 291 refers to raceID = 291": [
      950
    ]
  },
  {
    "2 races refers to COUNT(raceID) = 2": [
      951
    ]
  },
  {
    "Japanese refers to constructors.nationality = 'Japanese'": [
      951
    ]
  },
  {
    "lap numbers of over 50 refers to laps > 50": [
      953
    ]
  },
  {
    "from 2007 to 2009 refers to year between 2007 and 2009": [
      954
    ]
  },
  {
    "race completion refers to time is not null": [
      954
    ]
  },
  {
    "percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100": [
      954
    ]
  },
  {
    "before year 1975 refers to year < 1975": [
      955
    ]
  },
  {
    "born after 1975 refers to year(dob) >1975": [
      956
    ]
  },
  {
    "haven't finished the race refers to time is null": [
      957
    ]
  },
  {
    "in 2009 refers to year = 2009": [
      959
    ]
  },
  {
    "Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\"": [
      959,
      989
    ]
  },
  {
    "Spanish Grand Prix is the name of race refers to name = 'Spanish Grand Prix'": [
      960
    ]
  },
  {
    "average fastest lap speed refers to avg(fastestLapSpeed)": [
      960
    ]
  },
  {
    "shortest actual finishing time refers to Min(milliseconds) except milliseconds = null": [
      961
    ]
  },
  {
    "born before 1985 refers to year(dob)<1985": [
      962
    ]
  },
  {
    "in 2000 to 2005 refers to year between 2000 and 2005": [
      962
    ]
  },
  {
    "percentage = Divide(COUNT(driverId where year (dob) <1985 and laps >50),COUNT(DriverID where year between 2000 and 2005) *100": [
      962
    ]
  },
  {
    "lap time less than 02:00.00 refers to seconds < 120": [
      963
    ]
  },
  {
    "nationality = 'America'": [
      964
    ]
  },
  {
    "youngest driver refers to Max (year(dob))": [
      967
    ]
  },
  {
    "Netherlandic and Dutch refer to the same country": [
      967
    ]
  },
  {
    "born in 1980 refers to year(dob) = 1980": [
      969
    ]
  },
  {
    "born from 1980-1990 refers to year(dob) between 1980 and 1990": [
      970
    ]
  },
  {
    "earliest lap time refers to Min(time)": [
      970
    ]
  },
  {
    "oldest refers to MIN(year(dob))": [
      971
    ]
  },
  {
    "reference names appear in drverRef.": [
      971
    ]
  },
  {
    "born in 1971 refers to year(dob) = 1971": [
      972
    ]
  },
  {
    "has the fastest lap time refers to fastestLapTime has values": [
      972
    ]
  },
  {
    "born before 1982 refers to year(dob) < 1982": [
      973
    ]
  },
  {
    "latest lap time refers to Max(time)": [
      973
    ]
  },
  {
    "'has the fastest lap time?' refers to fastestLapTime has values": [
      974
    ]
  },
  {
    "lowest speed of lap time refers to Max(time)": [
      975
    ]
  },
  {
    "fastest time refers to Min(time)": [
      976
    ]
  },
  {
    "disqualified refers to statusID = 2, finisher refers to time! = null": [
      977
    ]
  },
  {
    "race no. refers to raceId": [
      977,
      980
    ]
  },
  {
    "raceId > 50 and raceId < 100": [
      977
    ]
  },
  {
    "location coordinates refers to (lat,lng)": [
      978
    ]
  },
  {
    "Austria refers to country = 'Austria'": [
      978
    ]
  },
  {
    "finisher refers to time is not null": [
      979
    ]
  },
  {
    "passed the second qualifying lap refers to q2 is not null": [
      980
    ]
  },
  {
    "birthday refers to dob": [
      980
    ]
  },
  {
    "reference name of drivers refers to driverRef": [
      980
    ]
  },
  {
    "first qualifying race refers to MIN(races.date)": [
      981
    ]
  },
  {
    "puncture status refers to status = Puncture": [
      982
    ]
  },
  {
    "introduction website refers to url": [
      983,
      984
    ]
  },
  {
    "Italian is a nationality": [
      983
    ]
  },
  {
    "slowest time refers to Max(time)": [
      985
    ]
  },
  {
    "fastest refers to Min(time)": [
      986
    ]
  },
  {
    "top 10 refers to rank <11": [
      987
    ]
  },
  {
    "AVG(fastestLapTime)": [
      987
    ]
  },
  {
    "born between 1980-1985 refers to 1980< year(dob)>1985": [
      988
    ]
  },
  {
    "Average pitstop duration refers to Divide(SUM(duration),COUNT(duration))": [
      988
    ]
  },
  {
    "shortest average refers to Min(avg(duration))": [
      988
    ]
  },
  {
    "the time of the champion shows in the format of \"minutes: seconds.millionsecond\" in which Max(time)": [
      990
    ]
  },
  {
    "constructor reference name refers to constructorRef": [
      990
    ]
  },
  {
    "Full name refers to forname, surname": [
      991
    ]
  },
  {
    "Date of birth refers to dob": [
      991,
      992
    ]
  },
  {
    "year(dob) BETWEEN '1981' AND '1991'": [
      991
    ]
  },
  {
    "Austrian is a nationality": [
      991
    ]
  },
  {
    "FFull name refers to forname+surname": [
      992
    ]
  },
  {
    "Nationality refers to German": [
      992
    ]
  },
  {
    "year(dob) BETWEEN '1971' AND '1985'": [
      992
    ]
  },
  {
    "coordinates expressed in latitude and longitude refers to (lat, lng)": [
      993
    ]
  },
  {
    "Monaco Grand Priz refers to the race": [
      994
    ]
  },
  {
    "race in year between 1980 and 2010": [
      994
    ]
  },
  {
    "Average score = AVG(points)": [
      995
    ]
  },
  {
    "races in date between '2000-01-01' and '2010-12-31'": [
      996
    ]
  },
  {
    "Citizenship of majority of drivers = MAX(nationality)": [
      997
    ]
  },
  {
    "citizenship and nationality are synonyms": [
      997
    ]
  },
  {
    "victories refer to wins": [
      998
    ]
  },
  {
    "91st refers to points": [
      998
    ]
  },
  {
    "Fastest lap speed refers to MIN(fastestLapTime)": [
      999
    ]
  },
  {
    "full location refers to location+country": [
      1000
    ]
  },
  {
    "most recent race = MAX(date)": [
      1000
    ]
  },
  {
    "Ranked 1st in the 3rd qualifying race refer to MIN(q3)": [
      1001
    ]
  },
  {
    "2008 is the year of race": [
      1001
    ]
  },
  {
    "full name of racer = forename, surname": [
      1001
    ]
  },
  {
    "full name refers to forename+surname": [
      1002
    ]
  },
  {
    "Youngest racer = MAX(dob)": [
      1002
    ]
  },
  {
    "number of accidents refers to the number where statusid = 3": [
      1003
    ]
  },
  {
    "Canadian Grand Prix refers to the race of name": [
      1003
    ]
  },
  {
    "oldest racer refers to MIN(dob)": [
      1004
    ]
  },
  {
    "full name refers to forename, surname.": [
      1004
    ]
  },
  {
    "longest time spent at pitstop refers to MAX(duration)": [
      1005
    ]
  },
  {
    "longest time refes to MAX(duration)": [
      1007
    ]
  },
  {
    "time spent at pit stop refers to duration": [
      1009
    ]
  },
  {
    "lap recod means the fastest time recorded which refers to time": [
      1010
    ]
  },
  {
    "shortest lap time refers to MIN(time)": [
      1011
    ]
  },
  {
    "the time format for the shortest lap time is 'MM:SS.mmm' or 'M:SS.mmm'": [
      1011
    ]
  },
  {
    "full name of the driver refers to forename, surname": [
      1011
    ]
  },
  {
    "fastest lap refers to MIN(time)": [
      1012
    ]
  },
  {
    "lap record means the fastest time recorded which refers to time": [
      1013,
      1014,
      1015
    ]
  },
  {
    "lap record means the fastest time recorded which refers to time, how long spent at pitstop refers to duration": [
      1016
    ]
  },
  {
    "lap records means the fastest time recorded which refers to time": [
      1017
    ]
  },
  {
    "coordinates are expressed as latitude and longitude which refers to (lat, lng)": [
      1017
    ]
  },
  {
    "average time in milliseconds spent at pit stop refers to AVG(milliseconds)": [
      1018
    ]
  },
  {
    "average = AVG(milliseconds)": [
      1019
    ]
  },
  {
    "highest overall rating refers to MAX(overall_rating)": [
      1020,
      1100
    ]
  },
  {
    "tallest player refers to MAX(height)": [
      1021,
      1079
    ]
  },
  {
    "preferred foot when attacking refers to preferred_foot": [
      1022,
      1050
    ]
  },
  {
    "lowest potential refers to MIN(potential)": [
      1022
    ]
  },
  {
    "overall_rating > = 60 AND overall_rating < 65": [
      1023
    ]
  },
  {
    "players whose going to be in all of your attack moves instead of defensing refers to defensive_work_rate = 'low'": [
      1023
    ]
  },
  {
    "perform better in crossing actions refers to MAX(crossing)": [
      1024
    ]
  },
  {
    "league that had the most goals refers to MAX(SUM(home_team_goal, away_team_goal))": [
      1025
    ]
  },
  {
    "2016 season refers to season = '2015/2016'": [
      1025,
      1026,
      1030
    ]
  },
  {
    "home team lost the matches refers to SUBTRACT(home_team_goal, away_team_goal) < 0": [
      1026
    ]
  },
  {
    "full name refers to player_name": [
      1027
    ]
  },
  {
    "players with highest number of penalties refers to MAX(penalties)": [
      1027
    ]
  },
  {
    "Final result should return the Team.team_long_name": [
      1028
    ]
  },
  {
    "Scotland Premier League refers to League.name = 'Scotland Premier League'": [
      1028,
      1049
    ]
  },
  {
    "away team refers to away_team_api_id": [
      1028,
      1146
    ]
  },
  {
    "away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal) > 0)": [
      1028
    ]
  },
  {
    "2010 season refers to season = '2009/2010'": [
      1028
    ]
  },
  {
    "won the most refers to MAX(COUNT(*))": [
      1028
    ]
  },
  {
    "speed in which attacks are put together refers to buildUpPlaySpeed": [
      1029
    ]
  },
  {
    "highest build up play speed refers to MAX(buildUpPlaySpeed)": [
      1029
    ]
  },
  {
    "most matches end as draw refers to MAX(SUM(home_team_goal = away_team_goal))": [
      1030
    ]
  },
  {
    "players age at present = SUBTRACT((DATETIME(), birthday))": [
      1031
    ]
  },
  {
    "sprint speed of no less than 97 refers to sprint_speed > = 97": [
      1031
    ]
  },
  {
    "between 2013 to 2015 refers to YEAR(date) > = '2013' AND YEAR(date) < = '2015'": [
      1031
    ]
  },
  {
    "league with highest matches of all time refers to MAX(COUNT(league_id))": [
      1032
    ]
  },
  {
    "average height = DIVIDE(SUM(height), COUNT(id))": [
      1033
    ]
  },
  {
    "players born between 1990 and 1995 refers to birthday > = '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'": [
      1033
    ]
  },
  {
    "highest above average overall ratings refers to MAX(overall_rating)": [
      1034
    ]
  },
  {
    "in 2010 refers to substr(date,1,4) = '2010'": [
      1034
    ]
  },
  {
    "teams with more than 50 but less than 60 build-up play speed refers to buildUpPlaySpeed >50 AND buildUpPlaySpeed <60": [
      1035
    ]
  },
  {
    "long name of teams refers to team_long_name": [
      1036
    ]
  },
  {
    "build-up play passing refers to buildUpPlayPassing": [
      1036
    ]
  },
  {
    "above-average build-up play passing = buildUpPlayPassing > DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL)": [
      1036
    ]
  },
  {
    "in 2012 refers to strftime('%Y', date) = '2012'": [
      1036
    ]
  },
  {
    "players who prefer left foot refers to preferred_foot = 'left'": [
      1037
    ]
  },
  {
    "percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 100)), COUNT(player_fifa_api_id))": [
      1037
    ]
  },
  {
    "born between 1987 and 1992 refers to YEAR(birthday) BETWEEN '1987' AND '1992'": [
      1037
    ]
  },
  {
    "number of goals made in all seasons combine = SUM(home_team_goal, away_team_goal)": [
      1038
    ]
  },
  {
    "average number of long shot = DIVIDE(SUM(long_shots), COUNT(player_fifa_api_id))": [
      1039
    ]
  },
  {
    "heights are above 180 refers to Player.height > 180": [
      1040
    ]
  },
  {
    "average heading accuracy = DIVIDE(SUM(heading_accuracy), COUNT(player_fifa_api_id))": [
      1040
    ]
  },
  {
    "normal build-up play dribbling class refers to buildUpPlayDribblingClass = 'Normal'": [
      1041
    ]
  },
  {
    "in 2014 refers to date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00'": [
      1041
    ]
  },
  {
    "names of the teams refers to team_long_name": [
      1041
    ]
  },
  {
    "less than average chance creation passing = DIVIDE(SUM(chanceCreationPassing), COUNT(id)) > chanceCreationPassing": [
      1041
    ]
  },
  {
    "name of league refers to League.name": [
      1042
    ]
  },
  {
    "average goals by the home team is higher than the away team = AVG(home_team_goal) > AVG(away_team_goal)": [
      1042
    ]
  },
  {
    "AVG(xx_goal) = SUM(xx_goal) / COUNT(DISTINCT Match.id)": [
      1042
    ]
  },
  {
    "2009/2010 season refers to season = '2009/2010'": [
      1042
    ]
  },
  {
    "short name of the football team refers to team_short_name": [
      1043,
      1074
    ]
  },
  {
    "Queens Park Rangers refers to team_long_name = 'Queens Park Rangers'": [
      1043
    ]
  },
  {
    "players with a birthyear of 1970 and a birthmonth of October refers to substr(birthday,1,7) AS 'year-month',WHERE year = '1970' AND month = '10'": [
      1044
    ]
  },
  {
    "ADO Den Haag refers to team_long_name = 'ADO Den Haag'": [
      1046
    ]
  },
  {
    "freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass": [
      1046
    ]
  },
  {
    "header's finishing rate refers to heading_accuracy": [
      1047
    ]
  },
  {
    "on 18/09/2014 refers to date = '2014-09-18 00:00:00'": [
      1047
    ]
  },
  {
    "in year 2011 refers to strftime('%Y', date) = '2011'": [
      1048
    ]
  },
  {
    "youngest football player refers to latest birthday": [
      1050
    ]
  },
  {
    "potential score refers to potential": [
      1051,
      1063,
      1075
    ]
  },
  {
    "highest potential score refers to MAX(potential)": [
      1051
    ]
  },
  {
    "weight < 130": [
      1052
    ]
  },
  {
    "preferred foot in attacking refers to preferred_foot": [
      1052
    ]
  },
  {
    "preferred_foot = 'left'": [
      1052,
      1064
    ]
  },
  {
    "chance creation passing class refers to chanceCreationPassingClass": [
      1053
    ]
  },
  {
    "chanceCreationPassingClass = 'Risky'": [
      1053
    ]
  },
  {
    "short name refers to team_short_name": [
      1053
    ]
  },
  {
    "football player who has the highest overall rating refers to MAX(overall_rating)": [
      1055
    ]
  },
  {
    "name of the football league refers to League.name": [
      1056
    ]
  },
  {
    "average home team goal = AVG(home_team_goal)= SUM(home_team_goal) / COUNT(DISTINCT Match.id) WHERE name = 'Poland' and season = '2010/2011'": [
      1057
    ]
  },
  {
    "finishing rate refers to finishing": [
      1058
    ]
  },
  {
    "highest average finishing rate = MAX(AVG(finishing))": [
      1058
    ]
  },
  {
    "highest football player refers to MAX(height)": [
      1058
    ]
  },
  {
    "shortest football player refers to MIN(height)": [
      1058
    ]
  },
  {
    "height>180": [
      1059
    ]
  },
  {
    "born after 1990 refers to strftime('%Y', birthday) = '1990'": [
      1060
    ]
  },
  {
    "team names refers to team_long_name": [
      1061,
      1065
    ]
  },
  {
    "speed class refers to buildUpPlaySpeedClass": [
      1061,
      1065,
      1141
    ]
  },
  {
    "buildUpPlaySpeedClass = 'Fast'": [
      1061,
      1065
    ]
  },
  {
    "overall_rating > 80": [
      1062
    ]
  },
  {
    "from 2008 to 2010 refers to strftime('%Y', date) BETWEEN '2008' AND '2010'": [
      1062
    ]
  },
  {
    "passing class refers to buildUpPlayPassingClass": [
      1066
    ]
  },
  {
    "CLB refers to team_short_name = 'CLB'": [
      1066
    ]
  },
  {
    "build up play passing refers to buildUpPlayPassing": [
      1067,
      1071
    ]
  },
  {
    "buildUpPlayPassing > 70": [
      1067
    ]
  },
  {
    "short names refers to team_short_name": [
      1067
    ]
  },
  {
    "from 2010 to 2015 refers to strftime('%Y', date) >= '2010' AND <= '2015'": [
      1068
    ]
  },
  {
    "average overall rating = SUM(t2.overall_rating)/ COUNT(t2.id)": [
      1068
    ]
  },
  {
    "higher than 170 refers to Player.height > 170": [
      1068
    ]
  },
  {
    "shortest height refers to MIN(height)": [
      1069
    ]
  },
  {
    "Italy Serie A from refers to League.name = 'Italy Serie A'": [
      1070
    ]
  },
  {
    "build up play speed refers to buildUpPlaySpeed": [
      1071
    ]
  },
  {
    "buildUpPlaySpeed = 31": [
      1071
    ]
  },
  {
    "build up play dribbling refers to buildUpPlayDribbling": [
      1071
    ]
  },
  {
    "buildUpPlayDribbling = 53": [
      1071
    ]
  },
  {
    "buildUpPlayPassing = 32": [
      1071
    ]
  },
  {
    "short name of the team refers to team_short_name": [
      1071
    ]
  },
  {
    "average overall rating = AVG(overall_rating)": [
      1072
    ]
  },
  {
    "Germany 1. Bundesliga refers to League.name = 'Germany 1. Bundesliga'": [
      1073
    ]
  },
  {
    "from August to October 2008 refers to strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10'": [
      1073
    ]
  },
  {
    "home team goal refers to home_team_goal": [
      1074
    ]
  },
  {
    "home_team_goal = 10": [
      1074
    ]
  },
  {
    "balance score refers to balance": [
      1075
    ]
  },
  {
    "highest balance score refers to MAX(balance)": [
      1075
    ]
  },
  {
    "potential = 61": [
      1075
    ]
  },
  {
    "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye'))": [
      1076
    ]
  },
  {
    "AVG(ball_control WHERE player_name = 'XX XX') = SUM(CASE WHEN player_name = 'XX XX' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'XX XX' THEN id ELSE NULL END)": [
      1076
    ]
  },
  {
    "long name for the team refers to team_long_name": [
      1077
    ]
  },
  {
    "team_short_name = 'GEN'": [
      1077
    ]
  },
  {
    "preferred foot when attacking was the left refers to preferred_foot = 'left'": [
      1080
    ]
  },
  {
    "players who would remain in his position when the team attacked refers to attacking_work_rate = 'low'": [
      1080
    ]
  },
  {
    "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League'": [
      1081,
      1091
    ]
  },
  {
    "Germany refers to Country.name = 'Germany'": [
      1082
    ]
  },
  {
    "overall strength refers to overall_rating": [
      1083
    ]
  },
  {
    "strongest overall strength refers to MAX(overall_rating)": [
      1083
    ]
  },
  {
    "players born before the year 1986 refers to strftime('%Y', birthday)<'1986'": [
      1084
    ]
  },
  {
    "players who would remain in his position and defense while the team attacked refers to defensive_work_rate = 'high'": [
      1084
    ]
  },
  {
    "Should consider DISTINCT in the final result": [
      1084,
      1229,
      1231,
      1251,
      1265,
      1270,
      1275
    ]
  },
  {
    "player who perform best in crossing actions refers to MAX(crossing)": [
      1085
    ]
  },
  {
    "height > 180": [
      1087
    ]
  },
  {
    "volley score refers to volleys": [
      1087
    ]
  },
  {
    "volleys > 70": [
      1087
    ]
  },
  {
    "volley score are over 70 refers to volleys > 70": [
      1088
    ]
  },
  {
    "dribbling score refers to dribbling are over 70 refers to dribbling > 70": [
      1088
    ]
  },
  {
    "Belgium refers to Country.name = 'Belgium'": [
      1089
    ]
  },
  {
    "long passing score refers to long_passing": [
      1090
    ]
  },
  {
    "oldest player refers to oldest birthday": [
      1090
    ]
  },
  {
    "in April, 2009 refers to SUBSTR(`date`, 1, 7)": [
      1091
    ]
  },
  {
    "league that had the most matches in the 2008/2009 season refers to MAX(league_name WHERE season = '2008/2009')": [
      1092
    ]
  },
  {
    "average overall rating = DIVIDE(SUM(overall_rating), COUNT(id))": [
      1093
    ]
  },
  {
    "born before the year 1986 refers to strftime('%Y', birthday) < '1986'": [
      1093
    ]
  },
  {
    "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100)": [
      1094
    ]
  },
  {
    "Heart of Midlothian refers to team_long_name = 'Heart of Midlothian'": [
      1095
    ]
  },
  {
    "average build up play speed refers to\u00a0 AVG(buildUpPlaySpeed)": [
      1095
    ]
  },
  {
    "Pietro Marino refers to player_name = 'Pietro Marino'": [
      1096
    ]
  },
  {
    "average overall rating AVG(T1.overall_rating)": [
      1096
    ]
  },
  {
    "Aaron Lennox's refers to T2.player_name = 'Aaron Lennox'": [
      1097
    ]
  },
  {
    "total crossing score refers to SUM(crossing)": [
      1097
    ]
  },
  {
    "Ajax's refers to team_long_name = 'Ajax'": [
      1098
    ]
  },
  {
    "chance creation passing score refers to MAX(chanceCreationPassing)": [
      1098
    ]
  },
  {
    "classified refer to chanceCreationPassingClass": [
      1098
    ]
  },
  {
    "Abdou Diallo refers to player_name = 'Abdou Diallo'": [
      1099
    ]
  },
  {
    "foot is preferred refers to preferred_foot": [
      1099
    ]
  },
  {
    "Dorlan Pabon refers to T2.player_name = 'Dorlan Pabon'": [
      1100
    ]
  },
  {
    "Parma refers to team_long_name = 'Parma'": [
      1101
    ]
  },
  {
    "average number of goals refers to AVG(away_team_goal)": [
      1101
    ]
  },
  {
    "77 points overall rating refers to overall_rating = 77": [
      1102
    ]
  },
  {
    "on 2016/6/23 refers to date LIKE '2016-06-23%'": [
      1102
    ]
  },
  {
    "Aaron Mooy refers to player_name = 'Aaron Mooy'": [
      1103
    ]
  },
  {
    "on 2016/2/4 refers to date LIKE '2016-02-04%'": [
      1103
    ]
  },
  {
    "Francesco Parravicini refers to player_name = 'Francesco Parravicini'": [
      1104
    ]
  },
  {
    "on 2010/8/30 refers to date = '2010-08-30 00:00:00'": [
      1104
    ]
  },
  {
    "Francesco Migliore refers to player_name = 'Francesco Migliore'": [
      1105
    ]
  },
  {
    "on 2015/5/1 refers to date LIKE '2015-05-01%'": [
      1105
    ]
  },
  {
    "Kevin Berigaud refers to player_name = 'Kevin Berigaud'": [
      1106
    ]
  },
  {
    "on 2013/2/22 refers to date = '2013-02-22 00:00:00'": [
      1106
    ]
  },
  {
    "Kevin Constant refers to player_name = 'Kevin Constant'": [
      1107
    ]
  },
  {
    "highest crossing score refers to MAX(crossing)": [
      1107
    ]
  },
  {
    "\"Willem II\" refers to team_long_name = 'Willem II'": [
      1108
    ]
  },
  {
    "on 2011/2/22 refers to date = '2012-02-22'": [
      1108
    ]
  },
  {
    "\"LEI\" refers to team_short_name = 'LEI'": [
      1109
    ]
  },
  {
    "on 2015/9/10 refers to\u00a0 date = '2015-09-10 00:00:00'": [
      1109
    ]
  },
  {
    "\"FC Lorient\" refers to team_long_name = 'FC Lorient'": [
      1110
    ]
  },
  {
    "on 2010/2/22 refers to date LIKE '2010-02-22%'": [
      1110
    ]
  },
  {
    "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'": [
      1111
    ]
  },
  {
    "on 2013/9/20 refers to date = '2013-09-20 00:00:00'": [
      1111
    ]
  },
  {
    "\"Hull City\" refers to team_long_name = 'Hull City'": [
      1112
    ]
  },
  {
    "on 2010/2/22 refers to date = '2010-02-22 00:00:00'": [
      1112
    ]
  },
  {
    "\"Hannover 96\" refers to team_long_name = 'Hannover 96'": [
      1113
    ]
  },
  {
    "on 2015/9/10 refers to date LIKE '2015-09-10%'": [
      1113
    ]
  },
  {
    "average overall rating refers to avg(overall_rating)": [
      1114
    ]
  },
  {
    "Marko Arnautovic refers to player_name = 'Marko Arnautovic'": [
      1114
    ]
  },
  {
    "from 2007/2/22 to 2016/4/21 refers to the first 10 characters of date BETWEEN '2007-02-22' and '2016-04-21'": [
      1114
    ]
  },
  {
    "Landon Donovan's refers to player_name = 'Landon Donovan'": [
      1115
    ]
  },
  {
    "Jordan Bowery refers to player_name = 'Jordan Bowery'": [
      1115
    ]
  },
  {
    "percentage refers to DIVIDE(SUBTRACT(player_name = 'Landon Donovan' overall_rating": [
      1115
    ]
  },
  {
    "player_name = 'Jordan Bowery' overall_rating), player_name = 'Landon Donovan' overall_rating)*100": [
      1115
    ]
  },
  {
    "tallest refers to rank based on the height in descending order": [
      1116
    ]
  },
  {
    "Most tallest players refers to rank = 1": [
      1116
    ]
  },
  {
    "heaviest refers to MAX(weight)": [
      1117
    ]
  },
  {
    "35 years old and above refers to datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34": [
      1118
    ]
  },
  {
    "Aaron Lennon refers to player_name = 'Aaron Lennon'": [
      1119
    ]
  },
  {
    "Daan Smith refers to player_name = 'Daan Smith'": [
      1120
    ]
  },
  {
    "Filipe Ferreira refers to player_name = 'Filipe Ferreira'": [
      1120
    ]
  },
  {
    "age are 30 years old and below refers to SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(birthday) < 31)": [
      1121
    ]
  },
  {
    "strongest players refers to player has MAX(overall_rating)": [
      1122
    ]
  },
  {
    "highest potential refers to MAX(potential)": [
      1123
    ]
  },
  {
    "tend to be attacking when their mates were doing attack moves refers to attacking_work_rate = 'high'": [
      1124
    ]
  },
  {
    "eldest player refers to MAX(SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'),datetime(birthday)))": [
      1125
    ]
  },
  {
    "finishing rate of 1 refers to finishing = 1": [
      1125
    ]
  },
  {
    "name of players refers to player_name": [
      1126
    ]
  },
  {
    "Belgium is name of country": [
      1126
    ]
  },
  {
    "vision scores of 90 and above refers to vision > 89": [
      1127
    ]
  },
  {
    "heaviest average weights refers to MAX(AVG(weight))": [
      1128
    ]
  },
  {
    "slow speed class refers to buildUpPlaySpeedClass = 'Slow'": [
      1129
    ]
  },
  {
    "long name refers to team_long_name": [
      1129
    ]
  },
  {
    "played safe while creating chance of passing refers to chanceCreationPassingClass = 'Safe'": [
      1130
    ]
  },
  {
    "short name of team refers to team_short_name": [
      1130
    ]
  },
  {
    "average heights refers to Avg(height)": [
      1131
    ]
  },
  {
    "Italy is name of country": [
      1131
    ]
  },
  {
    "over 180 cm tall refers to height > 180": [
      1132
    ]
  },
  {
    "name of football player refers to player_name": [
      1132
    ]
  },
  {
    "first name \"Aaron\" refers to player_name LIKE 'Aaron%'": [
      1133
    ]
  },
  {
    "born after the 1990s refers to birthday > '1990'": [
      1133
    ]
  },
  {
    "difference between players 6 and 23's jumping scores refers to SUBTRACT(jumping AND id = 6,jumping AND id = 23)": [
      1134
    ]
  },
  {
    "lowest potential players refers to MIN(potential)": [
      1135
    ]
  },
  {
    "prefer to use the right foot when attacking refers to preferred_foot = 'right'": [
      1135
    ]
  },
  {
    "highest potential score for crossing refers to MAX(crossing)": [
      1136
    ]
  },
  {
    "preferred to use their left foots while attacking refers to preferred_foot = 'left'": [
      1136
    ]
  },
  {
    "strength and stamina score of more than 80 refers to stamina > 80 and strength > 80": [
      1137
    ]
  },
  {
    "September 24, 2008 refers to date like '2008-09-24%'": [
      1139
    ]
  },
  {
    "in the Belgian Jupiler League refers to League.name = 'Belgium Jupiler League'": [
      1139
    ]
  },
  {
    "final score for home team refers to home_team_goal": [
      1139
    ]
  },
  {
    "final score for away team refers to away_team_goal": [
      1139
    ]
  },
  {
    "Alexis Blin's refers to player_name = 'Alexis Blin'": [
      1140
    ]
  },
  {
    "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'": [
      1141
    ]
  },
  {
    "In the 2015\u20132016 season refers to season = '2015/2016'": [
      1142
    ]
  },
  {
    "highest score of the home team refers to MAX(home_team_goal)": [
      1143
    ]
  },
  {
    "finishing rate refer to finishing": [
      1144
    ]
  },
  {
    "curve score refer to curve": [
      1144
    ]
  },
  {
    "heaviest weight refers to MAX(weight)": [
      1144
    ]
  },
  {
    "in the 2015-2016 season refers to season = '2015/2016'": [
      1145
    ]
  },
  {
    "league with most games refers to League.name where MAX(COUNT(id))": [
      1145
    ]
  },
  {
    "full name refers to team_long_name": [
      1146
    ]
  },
  {
    "scored the most goals refers to MAX(away_team_goal)": [
      1146
    ]
  },
  {
    "overall strength is the greatest refers to MAX(overall_rating)": [
      1147
    ]
  },
  {
    "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100": [
      1148
    ]
  },
  {
    "male refers to SEX = 'M'": [
      1149,
      1167,
      1169,
      1172,
      1191,
      1202,
      1208
    ]
  },
  {
    "in-patient refers to Admission = '+'": [
      1149,
      1161
    ]
  },
  {
    "outpatient refers to Admission = '-'": [
      1149,
      1152,
      1230
    ]
  },
  {
    "percentage = DIVIDE(COUNT(ID) where SEX = 'M' and Admission = '+', COUNT(ID) where SEX\u00a0 = 'M' and Admission = '-')": [
      1149
    ]
  },
  {
    "female refers to Sex = 'F'": [
      1150,
      1218,
      1223,
      1270
    ]
  },
  {
    "patient who were born after 1930 refers to year(Birthday) > '1930'": [
      1150
    ]
  },
  {
    "calculation = DIVIDE(COUNT(ID) where year(Birthday) > '1930' and SEX = 'F'), (COUNT(ID) where SEX = 'F')": [
      1150
    ]
  },
  {
    "patient born between Year 1930 to 1940 refers to year(Birthday) BETWEEN '1930-01-01' AND '1940-12-31'": [
      1151
    ]
  },
  {
    "inpatient refers to Admission = '+'": [
      1151,
      1152
    ]
  },
  {
    "'SLE' diagnosed patient means Diagnosis = 'SLE'": [
      1152
    ]
  },
  {
    "calculation =  DIVIDE(COUNT(ID) where Diagnosis = 'SLE' and Admission = '+', COUNT(ID) where Diagnosis = 'SLE' and Admission = '-')": [
      1152
    ]
  },
  {
    "'30609' is the Patient ID": [
      1153
    ]
  },
  {
    "disease means Diagnosis": [
      1153
    ]
  },
  {
    "When was the examination taken refers to `Examination Date`": [
      1154
    ]
  },
  {
    "LDH beyond normal range refers to LDH > '500'": [
      1155
    ]
  },
  {
    "age refers to SUBTRACT(year(current_timestamp), year(Birthday))": [
      1156,
      1211
    ]
  },
  {
    "positive degree of coagulation refers to RVVT = '+'": [
      1156
    ]
  },
  {
    "severe degree of thrombosis refers to thrombosis = 2": [
      1157
    ]
  },
  {
    "disease refers to diagnosis": [
      1157,
      1197
    ]
  },
  {
    "who were born in 1937 refers to year(birthday) = '1937'": [
      1158
    ]
  },
  {
    "total cholesterol was beyond the normal range refers to `T-CHO` > = '250'": [
      1158
    ]
  },
  {
    "albumin level lower than 3.5 refers to ALB < 3.5": [
      1159
    ]
  },
  {
    "female refers to sex = 'F'": [
      1160,
      1162,
      1243
    ]
  },
  {
    "total protein not within the normal range refers to TP < '6.0' or TP > '8.5'": [
      1160
    ]
  },
  {
    "calculation = DIVIDE((ID where sex = 'F' and TP < '6.0' or TP > '8.5'), COUNT(ID)) * 100": [
      1160
    ]
  },
  {
    "age 50 and above refers to SUBTRACT(year(current_timestamp), year(Birthday)) >= '50'": [
      1161
    ]
  },
  {
    "average anti-cardiolipin antibody (IgG) concentration refers to AVG(aCL IgG)": [
      1161
    ]
  },
  {
    "came at the hospital in 1997 refers to year(Description) = '1997'": [
      1162
    ]
  },
  {
    "immediately followed at the outpatient clinic refers to Admission = '-'": [
      1162
    ]
  },
  {
    "age refers to SUBTRACT(YEAR(`First Date`),YEAR(Birthday))": [
      1163
    ]
  },
  {
    "the most serious thrombosis refers to Thrombosis = '1' (the most severe one)": [
      1164
    ]
  },
  {
    "women refers to sex = 'F'": [
      1164
    ]
  },
  {
    "age gap refers to SUBTRACT(MAX(year(Birthday)) - MIN(year(Birthday)))": [
      1165
    ]
  },
  {
    "normal triglyceride refers to tg > = 200": [
      1165
    ]
  },
  {
    "symptoms observed refers to the symptoms is not NULL": [
      1166
    ]
  },
  {
    "the year that concluded on December 31, 1998 refers to Date BETWEEN '1998-01-01' AND '1998-12-31'": [
      1167
    ]
  },
  {
    "calculation = DIVIDE(COUNT(ID), 12)": [
      1167
    ]
  },
  {
    "'SJS' refers to diagnosis": [
      1168
    ]
  },
  {
    "(SUBTRACT(year(`First Date`)), year(Birthday))": [
      1168
    ]
  },
  {
    "age of the patients when they initially arrived at the hospital refers to year(Birthday)": [
      1168
    ]
  },
  {
    "female refers to SEX = 'F'": [
      1169,
      1188,
      1195,
      1198,
      1203,
      1215
    ]
  },
  {
    "abnormal uric acid refers to UA < = '8.0' where SEX = 'M', UA < = '6.5' where SEX = 'F'": [
      1169
    ]
  },
  {
    "calculation = DIVIDE(SUM(UA <= '8.0' and SEX = 'M'), SUM(UA <= '6.5 and SEX = 'F'))": [
      1169
    ]
  },
  {
    "hadn't undergone a medical examination until at least a year refers to SUBTRACT(year(`Examination Date`), year(`First Date`)) > = 1": [
      1170
    ]
  },
  {
    "underage patients refers to year(Birthday) < 18": [
      1171
    ]
  },
  {
    "three-year period from 1990 to 1993 refers to year(`Examination Date`) between '1990' and '1993'": [
      1171
    ]
  },
  {
    "elevated means above the normal range": [
      1172
    ]
  },
  {
    "total bilirubin above the normal range refers to `T-BIL` >= '2.0'": [
      1172
    ]
  },
  {
    "the most common illness refers to MAX(COUNT(Diagnosis))": [
      1173
    ]
  },
  {
    "lab work between 1/1/1985 and 12/31/1995 refers to `Examination Date` between '1985-01-01' and '1995-12-31 '": [
      1173
    ]
  },
  {
    "average age of patients as of year 1999 refers to AVG(SUBTRACT('1999', year(Birthday)))": [
      1174
    ]
  },
  {
    "October of 1991 refers to Date BETWEEN '1991-10-01' AND '1991-10-30'": [
      1174
    ]
  },
  {
    "How old the patient refers to SUBTRACT(year(`Examination Date`), year(Birthday))": [
      1175
    ]
  },
  {
    "the highest hemoglobin count refers to MAX(HGB)": [
      1175
    ]
  },
  {
    "anti-nucleus antibody refers to ANA": [
      1176
    ]
  },
  {
    "1996/12/2 refers to `Examination Date` = '1996-12-02'": [
      1176
    ]
  },
  {
    "total cholesterol normal level refers to N < 250": [
      1177
    ]
  },
  {
    "gender means SEX": [
      1178
    ]
  },
  {
    "'AORTITIS' refers to Diagnosis": [
      1178
    ]
  },
  {
    "diagnosed with SLE refers to Diagnosis = 'SLE'": [
      1179,
      1238,
      1250,
      1273,
      1306
    ]
  },
  {
    "1994/2/19 refers to Description = '1994-02-19'": [
      1179
    ]
  },
  {
    "anti-Cardiolipin refers to aCL IgM": [
      1179
    ]
  },
  {
    "1993/11/12 refers to Examination Date = '1993/11/12'": [
      1179
    ]
  },
  {
    "man refers to SEX = 'M'": [
      1180
    ]
  },
  {
    "women refers to SEX = 'F'": [
      1180,
      1193,
      1201
    ]
  },
  {
    "ALT glutamic pylvic transaminase status got 9 GPT = '9'": [
      1180
    ]
  },
  {
    "1992/6/12 refers to Date = '1992-06-12'": [
      1180
    ]
  },
  {
    "how old at that time refers to SUBTRACT(year(test date), year(Birthday))": [
      1181
    ]
  },
  {
    "uric acid level as 8.4 refers to UA = '8.4'": [
      1181
    ]
  },
  {
    "1991/10/21 refers to Date = '1991-10-21'": [
      1181
    ]
  },
  {
    "1991/6/13 refers to `First Date` = '1991-06-13'": [
      1182
    ]
  },
  {
    "'SJS' refers to Diagnosis": [
      1182
    ]
  },
  {
    "total number of his/her Laboratory tests refers to COUNT(ID)": [
      1182
    ]
  },
  {
    "1995 refers to Date": [
      1182
    ]
  },
  {
    "'SLE' AND original diagnose refers to diagnosis": [
      1183
    ]
  },
  {
    "1997/1/27 refer to `Examination Date` = '1997-01-27'": [
      1183
    ]
  },
  {
    "first came to the hospital refers to patient.`First Date`": [
      1183
    ]
  },
  {
    "born on 1959/2/18 refers to Birthday = '1959-02-18'": [
      1185
    ]
  },
  {
    "calculation = SUBTRACT(SUM(Birthday = '1959-02-18' and Date like '1981-11-%' THEN `T-CHO`), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`))": [
      1185
    ]
  },
  {
    "'Behcet' refers to diagnosis": [
      1186
    ]
  },
  {
    "exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'": [
      1186
    ]
  },
  {
    "examined between 1987/7/6 and 1996/1/31 refers to Date BETWEEN '1987-07-06' AND '1996-01-31'": [
      1187
    ]
  },
  {
    "GPT level greater than 30 refers to GPT > 30": [
      1187
    ]
  },
  {
    "ALB level less than 4 ALB < 4": [
      1187
    ]
  },
  {
    "born in 1964 refers to YEAR(Birthday) = 1964": [
      1188
    ]
  },
  {
    "admitted to the hospital refers to Admission = '+'": [
      1188,
      1265,
      1278,
      1286
    ]
  },
  {
    "thrombosis level 2 refers to Thrombosis = 2": [
      1189
    ]
  },
  {
    "ANA pattern of only S refers to ANA = 'S'": [
      1189
    ]
  },
  {
    "average anti-Cardiolip in antibody (IgM) refers to AVG(`aCL IgM`)": [
      1189
    ]
  },
  {
    "calculation = MULTIPLY(AVG + AVG, 0.2)": [
      1189
    ]
  },
  {
    "proteinuria level within the normal range refers to `U-PRO` > 0 AND `U-PRO` < 30": [
      1190
    ]
  },
  {
    "uric acid level below the normal range refers to UA < = 6.5": [
      1190
    ]
  },
  {
    "calculation = MULTIPLY(DIVIDE(UA < = 6.5, `U-PRO` > 0 AND `U-PRO` < 30)\uff0c100)": [
      1190
    ]
  },
  {
    "first presented to the hospital in 1981 refers to YEAR(`FIRST DATE`) = '1981'": [
      1191
    ]
  },
  {
    "BEHCET refers to diagnosis": [
      1191
    ]
  },
  {
    "calculation = DIVIDE(SUM(DIAGNOSIS = 'BEHCET') where YEAR(`FIRST DATE`) = '1981', MULTIPLY(COUNT(YEAR(`FIRST DATE`) = '1981')), 100)": [
      1191
    ]
  },
  {
    "followed up at the outpatient clinic refers to Admission = '-'": [
      1192
    ]
  },
  {
    "laboratory test in April 1981 refers to Date like '1991-10%'": [
      1192
    ]
  },
  {
    "blood bilirubin level within the normal range refers to T-BIL < 2.0": [
      1192
    ]
  },
  {
    "Excluding all P only ANA Pattern refers to `ANA Pattern`! = 'P'": [
      1193
    ]
  },
  {
    "born between 1980 and 1989 refers to BIRTHDAY": [
      1193
    ]
  },
  {
    "PSS' refers to diagnosis": [
      1194
    ]
  },
  {
    "blood level of C-reactive protein de 2+refers to CRP > 2": [
      1194
    ]
  },
  {
    "createnine 1 refers to CRE = 1": [
      1194
    ]
  },
  {
    "LDH 123 refers to LDH = 123": [
      1194
    ]
  },
  {
    "average blood albumin level refers to AVG(ALB)": [
      1195
    ]
  },
  {
    "PLT greater than 400 refers to PLT > 400": [
      1195
    ]
  },
  {
    "diagnosed with SLE refers to Diagnosis= 'SLE'": [
      1195
    ]
  },
  {
    "the most common sign refers to MAX(symptoms)": [
      1196
    ]
  },
  {
    "'SLE' refers to diagnosis": [
      1196,
      1200
    ]
  },
  {
    "medical information first documented refers to Description": [
      1197
    ]
  },
  {
    "patient number refers to id": [
      1197
    ]
  },
  {
    "APS diagnosis refers to Diagnosis='APS'": [
      1198
    ]
  },
  {
    "underwent testing in 1997 refers to YEAR(DATE) = '1997'": [
      1199
    ]
  },
  {
    "protein levels within the normal range refers to tp > 6 and tp < 8.5": [
      1199
    ]
  },
  {
    "thrombocytopenia' refers to symptoms": [
      1200
    ]
  },
  {
    "calculation =  DIVIDE(SUM(DIAGNOSIS LIKE '%ITP%'), SUM(DIAGNOSIS LIKE '%SLE%')) MULTIPLY 100": [
      1200
    ]
  },
  {
    "born in 1980 refers to YEAR(BIRTHDAY) = '1980'": [
      1201
    ]
  },
  {
    "'RA' refers to Diagnosis='RA'": [
      1201
    ]
  },
  {
    "calculation = DIVIDE(SUM(SEX = 'F'), COUNT(SEX)) * 100": [
      1201
    ]
  },
  {
    "underwent testing between 1995 and 1997 refers to `Examination Date` between '1995' and '1997'": [
      1202
    ]
  },
  {
    "Behcet refers to diagnosis": [
      1202
    ]
  },
  {
    "did not stay in the hospital refers to Admission = '-'": [
      1202
    ]
  },
  {
    "white blood cells that were below 3.5 refers to WBC < 3.5": [
      1203
    ]
  },
  {
    "DATEDIFF(`Examination Date`, `First Date`)": [
      1204
    ]
  },
  {
    "uric acid within a normal range refers to UA > 8.0 and SEX = 'M'OR UA > 6.5 and SEX = 'F'": [
      1205
    ]
  },
  {
    "AST glutamic oxaloacetic transaminase (GOT) index is above the normal range refers to GOT > = 60": [
      1206
    ]
  },
  {
    "when refers to DATE": [
      1206
    ]
  },
  {
    "AST glutamic oxaloacetic transaminase (GOT) index is within normal range refers to GOT < 60": [
      1207
    ]
  },
  {
    "examination in 1994 refers to year(Date) = 1994": [
      1207
    ]
  },
  {
    "ALT glutamic pylvic transaminase (GPT) exceed the normal range refers to GPT > = 60": [
      1208
    ]
  },
  {
    "ALT glutamic pylvic transaminase beyond the normal range refers to GPT > 60": [
      1209
    ]
  },
  {
    "average index of the lactate dehydrogenase (LDH) refers to AVG(LDH)": [
      1210
    ]
  },
  {
    "(LDH) within the normal range refers to LDH < 500": [
      1210
    ]
  },
  {
    "lactate dehydrogenase (LDH) between 100-300 index above the normal range refers to LDH between 600 and 800": [
      1211
    ]
  },
  {
    "alkaliphophatase (ALP) within normal range refers to ALP < 300": [
      1212,
      1213
    ]
  },
  {
    "inpatient refers to admission = '+'": [
      1212
    ]
  },
  {
    "outpatient refers to admission = '-'": [
      1212
    ]
  },
  {
    "total protein (TP) below the lower range of the normal index refers to TP < 6.0": [
      1214
    ]
  },
  {
    "total protein (TP) beyond the normal index refers to TP > 8.5": [
      1215
    ]
  },
  {
    "deviation of TP index from normal refers to SUBTRACT(TP, 8.5)": [
      1215
    ]
  },
  {
    "male = SEX = 'M'": [
      1216
    ]
  },
  {
    "albumin not within range refers to ALB < = 3.5 or ALB > = 5.5": [
      1216
    ]
  },
  {
    "Year(Birthday) = '1982'": [
      1217
    ]
  },
  {
    "albumin is within normal range refers to ALB between 3.5 and 5.5": [
      1217
    ]
  },
  {
    "uric acid (UA) beyond the normal range refers to UA > 8.0 and SEX = 'M' or UA > 6.5 and SEX = 'F'": [
      1218
    ]
  },
  {
    "uric acid (UA) with normal range refers to UA < 8.0 and SEX = 'M' or UA < 6.5 and SEX = 'F'": [
      1219
    ]
  },
  {
    "average UA index refers to AVG(UA)": [
      1219
    ]
  },
  {
    "urea nitrogen (UN) just within the borderline of passing refers to UN = 29": [
      1220
    ]
  },
  {
    "within the UN normal index refers to UN < 30": [
      1221
    ]
  },
  {
    "Diagnosis = 'RA'": [
      1221
    ]
  },
  {
    "creatinine (CRE) out of the normal range refers to CRE > = 1.5": [
      1222
    ]
  },
  {
    "Male refers to Sex = 'M'": [
      1222
    ]
  },
  {
    "creatinine (CRE) not within the normal range refers to CRE > = 1.5": [
      1223
    ]
  },
  {
    "male refers to Sex = 'M'": [
      1223,
      1275,
      1280,
      1283,
      1291,
      1310
    ]
  },
  {
    "calculation = (SUM(SEX = 'M') > SUM(SEX = 'F')) where CRE > = 1.5": [
      1223
    ]
  },
  {
    "the highest total bilirubin refers to MAX(T-BIL)": [
      1224
    ]
  },
  {
    "List refers to GROUP_CONCAT(DISTINCT ID)": [
      1225
    ]
  },
  {
    "total bilirubin (T-BIL) not within normal range refers to T-BIL > = 2.0": [
      1225
    ]
  },
  {
    "oldest patient refers to MIN(birthday)": [
      1226
    ]
  },
  {
    "highest total cholesterol refers to MAX(T-CHO)": [
      1226
    ]
  },
  {
    "average age = DIVIDE(SUM(SUBTRACT(YEAR(NOW()), YEAR(birthday))), COUNT(ID))": [
      1227
    ]
  },
  {
    "male patient refers to sex = 'M'": [
      1227
    ]
  },
  {
    "high cholesterol refers to `T-CHO` > = 250": [
      1227
    ]
  },
  {
    "triglyceride (TG) index greater than 100 of the normal range refers to TG > 300": [
      1228
    ]
  },
  {
    "triglyceride (TG) level beyond the normal range refers to TG > = 200": [
      1229
    ]
  },
  {
    "more than 50 years of age = SUBTRACT(year(current_timestamp), year(Birthday)) > 50": [
      1229
    ]
  },
  {
    "normal range of creatinine phosphokinase refers to CPK < 250": [
      1230,
      1302
    ]
  },
  {
    "born between 1936-1956 refers to year(Birthday) BETWEEN '1936' AND '1956'": [
      1231
    ]
  },
  {
    "male patients refers to sex = 'M'": [
      1231
    ]
  },
  {
    "creatinine phosphokinase beyond the normal range refers to CPK > = 250": [
      1231
    ]
  },
  {
    "age = SUBTRACT(year(current_timestamp), year(Birthday))": [
      1232,
      1235,
      1239
    ]
  },
  {
    "blood glucose (GLU) not within normal range refers to GLU > = 180": [
      1232
    ]
  },
  {
    "total cholesterol(T-CHO) within normal range refers to `T-CHO` < 250": [
      1232
    ]
  },
  {
    "blood glucose (GLU) index that were within normal range refers to GLU < 180": [
      1233
    ]
  },
  {
    "data that was first recorded in 1991 refers to year(Description) = 1991": [
      1233
    ]
  },
  {
    "abnormal white blood cell count refers to WBC < = 3.5 or WBC > = 9.0": [
      1234
    ]
  },
  {
    "patient's diagnosis refers to Diagnosis": [
      1235
    ]
  },
  {
    "lower red blood cell refers to RBC < 3.5": [
      1235
    ]
  },
  {
    "female patient refers to Sex = 'F'": [
      1236
    ]
  },
  {
    "age 50 and above = SUBTRACT(year(current_timestamp), year(Birthday)) > = 50": [
      1236
    ]
  },
  {
    "abnormal red blood cell count refers to RBC < = 3.5 or RBC > = 6.0": [
      1236
    ]
  },
  {
    "Admission = '+' means the patient was admitted to the hospital": [
      1236
    ]
  },
  {
    "Admission = '-' means the patient was not admitted to the hospital": [
      1236
    ]
  },
  {
    "outpatients refers to Admission = '-'": [
      1237
    ]
  },
  {
    "low hemoglobin level refers to HBG < 10": [
      1237
    ]
  },
  {
    "normal hemoglobin level refers to 10 < HGB < 17": [
      1238
    ]
  },
  {
    "patient with two or more laboratory examinations refers to COUNT(ID) > 2": [
      1239
    ]
  },
  {
    "hematoclit level exceeded the normal range refers to HCT > = 52": [
      1239
    ]
  },
  {
    "laboratory examinations in 1991 refers to Date like '1991%'": [
      1240
    ]
  },
  {
    "average hematoclit level = AVG(HCT)": [
      1240
    ]
  },
  {
    "hematoclit level that is lower than the normal range refers to HCT < 29": [
      1240
    ]
  },
  {
    "abnormal platelet level refers to PLT <= 100 or PLT >= 400": [
      1241
    ]
  },
  {
    "platelet level lower than normal range refers to PLT < 100": [
      1241
    ]
  },
  {
    "calculation = SUBTRACT(SUM(PLT < 100), SUM(PLT > 400))": [
      1241
    ]
  },
  {
    "platelet level higher than normal range refers to PLT > 400": [
      1241
    ]
  },
  {
    "laboratory examinations take in 1984 refers to YEAR(Date) = '1984'": [
      1242
    ]
  },
  {
    "below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50": [
      1242
    ]
  },
  {
    "normal platelet level refers to PLT between 100 and 400": [
      1242
    ]
  },
  {
    "older than 55 years old = SUBTRACT(year(current_timestamp), year(Birthday)) > 55": [
      1243
    ]
  },
  {
    "abnormal prothrombin time (PT) refers to PT > = 14": [
      1243
    ]
  },
  {
    "percentage = DIVIDE(SUM(PT > = 14 AND SEX = 'F'), SUM(PT > = 14)) * 100": [
      1243
    ]
  },
  {
    "first came to the hospital after year 1992 refers to year(`First Date`) > 1992": [
      1244
    ]
  },
  {
    "prothrombin time (PT) level that are normal refers to PT < 14": [
      1244
    ]
  },
  {
    "examinations done after 1997/1/1 refers to `Examination Date` > '1997-01-01'": [
      1245
    ]
  },
  {
    "normal activated partial prothrom bin time refesr to APTT < 45": [
      1245
    ]
  },
  {
    "abnormal activated partial prothrom bin time refers to APTT > 45": [
      1246
    ]
  },
  {
    "does not have thrombosis refers to Thrombosis = 0": [
      1246,
      1267
    ]
  },
  {
    "Only count ones without repetitive.": [
      1246
    ]
  },
  {
    "male patients refers to Sex = 'M'": [
      1247
    ]
  },
  {
    "normal level of white blood cells refers to WBC > 3.5 and WBC <9.0": [
      1247
    ]
  },
  {
    "abnormal fibrinogen level refers to FG < = 150 or FG > = 450": [
      1247
    ]
  },
  {
    "Don't compute repetitive ones.": [
      1247
    ]
  },
  {
    "born after 1980/1/1 refers to Birthday > '1980-01-01'": [
      1248
    ]
  },
  {
    "normal fibrinogen level refers to FG between 150 and 450": [
      1248
    ]
  },
  {
    "Should return the number of distinct patients.": [
      1248
    ]
  },
  {
    "disease names refers to Diagnosis": [
      1249
    ]
  },
  {
    "proteinuria level higher than normal refers to `U-PRO` > = 30": [
      1249
    ]
  },
  {
    "normal proteinuria level refers to 0 < `U-PRO` < 30": [
      1250
    ]
  },
  {
    "Ig G higher than normal refers to IGG >= 2000": [
      1251
    ]
  },
  {
    "normal Ig G level refers to IGG > 900 and IGG < 2000": [
      1252
    ]
  },
  {
    "have symptoms refers to Symptoms IS NOT NULL": [
      1252
    ]
  },
  {
    "highest Ig A within the normal range refers to MAX(IGA BETWEEN 80 AND 500)": [
      1253
    ]
  },
  {
    "normal Ig A level refers to IGA > 80 AND IGA < 500": [
      1254
    ]
  },
  {
    "came to the hospital after 1990/1/1 refers to YEAR(`First Date`) > = 1990": [
      1254
    ]
  },
  {
    "abnormal Ig M level refers to IGM <=40 OR IGM >= 400": [
      1255
    ]
  },
  {
    "most common disease refers to MAX(COUNT(Diagnosis))": [
      1255
    ]
  },
  {
    "abnormal C-reactive protein refers to CRP ='+'": [
      1256
    ]
  },
  {
    "don't have data recorded refers to Description IS NULL": [
      1256
    ]
  },
  {
    "creatinine level is abnormal refers to CRE >= 1.5": [
      1257
    ]
  },
  {
    "aren't 70 yet refers to SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 70": [
      1257
    ]
  },
  {
    "normal Rhuematoid Factor refers TO RA IN('-', '+-')": [
      1258
    ]
  },
  {
    "positive measure of degree of coagulation refers to KCT = '+'": [
      1258
    ]
  },
  {
    "Should compute the number of distinct ones": [
      1258,
      1262,
      1271,
      1273,
      1274
    ]
  },
  {
    "diseases refers to Diagnosis": [
      1259,
      1276
    ]
  },
  {
    "born after 1985/1/1 refers to YEAR(Birthday) > = 1985": [
      1259
    ]
  },
  {
    "normal Rhuematoid Factor refers to RA IN('-', '+-')": [
      1259
    ]
  },
  {
    "RF is normal refers to RF < 20": [
      1260
    ]
  },
  {
    "older than 60 = SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) > 60": [
      1260
    ]
  },
  {
    "normal RF refers to RF < 20": [
      1261
    ]
  },
  {
    "don't have thrombosis refers to Thrombosis = '0'": [
      1261
    ]
  },
  {
    "normal level of complement 3 refers to C3 > 35": [
      1262
    ]
  },
  {
    "have a P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P'": [
      1262
    ]
  },
  {
    "Hematoclit is normal refers to 29 < N < 52": [
      1263
    ]
  },
  {
    "highest anti-Cardiolipin antibody concentration refers to MAX(`aCL IgA`)": [
      1263
    ]
  },
  {
    "APS will result in Blood Clots in veins": [
      1264
    ]
  },
  {
    "normal level of complement 4 refers to C4 > 10": [
      1264
    ]
  },
  {
    "Should compute the number of different ones": [
      1264
    ]
  },
  {
    "normal level of anti-ribonuclear protein refers to RNP = '-', '+-'": [
      1265
    ]
  },
  {
    "And'-' means 'negative'": [
      1265
    ]
  },
  {
    "'+-' refers to '0'": [
      1265
    ]
  },
  {
    "youngest patient refers to MAX(Birthday)": [
      1266
    ]
  },
  {
    "abnormal anti-ribonuclear protein level refers to RNP NOT IN('-', '+-')": [
      1266
    ]
  },
  {
    "date of birth refers to Birthday": [
      1266
    ]
  },
  {
    "normal anti-SM refers to SM IN('-', '+-')": [
      1267
    ]
  },
  {
    "SM = 'negative' means '-'": [
      1267
    ]
  },
  {
    "SM = '0' means '+-'": [
      1267
    ]
  },
  {
    "SM = '1' means '+'": [
      1267
    ]
  },
  {
    "abnormal anti-SM refers to SM NOT IN ('negative', '0')": [
      1268
    ]
  },
  {
    "youngest refers to MAX(Birthday)": [
      1268
    ]
  },
  {
    "examination done after 1997/1/1 refers to `Examination Date` >  1997-01-01": [
      1269
    ]
  },
  {
    "normal anti-scl70 refers to SC170 IN('negative','0')": [
      1269
    ]
  },
  {
    "normal anti-scl70 refers to SC170 IN('negative', '0')": [
      1270
    ]
  },
  {
    "does not have any symptom refers to symptoms IS NULL": [
      1270
    ]
  },
  {
    "normal anti-SSA refers to SSA IN('-','+-')": [
      1271
    ]
  },
  {
    "came to the hospital before 2000 refers to YEAR(`First Date`) < 2000": [
      1271
    ]
  },
  {
    "first patient refers to ID with MIN(`First Date`)": [
      1272
    ]
  },
  {
    "abnormal anti-SSA refers to SSA NOT IN('negative', '0')": [
      1272
    ]
  },
  {
    "normal anti-SSB refers to SSB IN('-', '+-')": [
      1273
    ]
  },
  {
    "'-' is expressed as 'negative' and '+-' is expressed as '0' in the database": [
      1273
    ]
  },
  {
    "anti-SSB are normal refers to SSB IN ('negative', '0')": [
      1274
    ]
  },
  {
    "have other symptoms refers to Symptoms IS NOT NULL": [
      1274
    ]
  },
  {
    "normal level of anti-centromere refers to CENTROMEA IN('-', '+-')": [
      1275
    ]
  },
  {
    "normal level of anti-SSB refers to SSB IN('-', '+-')": [
      1275
    ]
  },
  {
    "abnormal level of anti-DNA refers to DNA > = 8": [
      1276
    ]
  },
  {
    "normal anti-DNA level refers to DNA < 8": [
      1277
    ]
  },
  {
    "data are not recorded refers to Description IS NULL": [
      1277
    ]
  },
  {
    "Should compute the number of unique ones": [
      1277
    ]
  },
  {
    "normal level of IGG refers to 900 < IGG < 2000": [
      1278
    ]
  },
  {
    "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60": [
      1279,
      1281
    ]
  },
  {
    "percentage = MULTIPLY(DIVIDE(COUNT(ID WHERE GOT > = 60 AND Diagnosis = 'SLE'), COUNT(ID WHERE GOT > = 60)), 1.0)": [
      1279
    ]
  },
  {
    "glutamic oxaloacetic transaminase in the normal range refers to GOT < 60": [
      1280
    ]
  },
  {
    "highest glutamic pylvic transaminase in the normal range refers to MAX(GPT < 60)": [
      1282
    ]
  },
  {
    "normal glutamic pylvic transaminase level refers to GOT < 60": [
      1283
    ]
  },
  {
    "highest lactate dehydrogenase in the normal range refers to MAX(LDH < 500)": [
      1284
    ]
  },
  {
    "when the data first recorded refers to MIN(First Date)": [
      1284
    ]
  },
  {
    "latest patient refers to ID with MAX('First Date')": [
      1285
    ]
  },
  {
    "abnormal level of lactate dehydrogenase refers to LDH > = 500": [
      1285
    ]
  },
  {
    "abnormal alkaliphophatase level refers to ALP > = 300": [
      1286
    ]
  },
  {
    "followed at the outpatient clinic refers to Admission = '-'": [
      1287,
      1307
    ]
  },
  {
    "normal level of alkaliphophatase refers to ALP < 300": [
      1287
    ]
  },
  {
    "total protein is lower than normal refers to TP < 6.0": [
      1288
    ]
  },
  {
    "diagnosed with SJS refers to Diagnosis = 'SJS'": [
      1289
    ]
  },
  {
    "normal level of total protein refers to TP > 6.0 and TP < 8.5": [
      1289
    ]
  },
  {
    "examination date refers to Date": [
      1290
    ]
  },
  {
    "albumin is the highest in the normal range refers to MAX(ALB > 3.5 and ALB < 5.5)": [
      1290
    ]
  },
  {
    "normal level of both albumin and total protein refers to ALB > 3.5 and ALB < 5.5 AND TP between 6.0 and 8.5": [
      1291
    ]
  },
  {
    "anti Cardiolipin antibody concentration refers to `aCL IgG`, `aCL IgM`, `aCL IgA`": [
      1292
    ]
  },
  {
    "female patient refers to Sex = F'": [
      1292
    ]
  },
  {
    "highest uric acid level in the normal range refers to MAX(UA > 6.50)": [
      1292
    ]
  },
  {
    "highest anti-nucleus antibody concentration level refers to MAX(ANA)": [
      1293
    ]
  },
  {
    "normal creatinine level refers to CRE < 1.5": [
      1293
    ]
  },
  {
    "creatinine level is normal refers to CRE < 1.5": [
      1294
    ]
  },
  {
    "anti Cardiolipin antibody concentration level is the highest refers to MAX(aCL IgA)": [
      1294
    ]
  },
  {
    "total bilirubin is over the normal range refers to `T-BIL` > = 2.0": [
      1295
    ]
  },
  {
    "peripheral pattern is observed in the sheet of ANA examination refers to that ANA Pattern contains 'P'": [
      1295
    ]
  },
  {
    "anti-nucleus antibody concentration refers to ANA": [
      1296
    ]
  },
  {
    "total bilirubin is the highest in the normal range refers to MAX(`T-BIL` < 2.0)": [
      1296
    ]
  },
  {
    "total cholesterol is higher than normal refers to `T-CHO` > = 250": [
      1297
    ]
  },
  {
    "negative measure of degree of coagulation refers to KCT = '-'": [
      1297
    ]
  },
  {
    "total cholesterol is within the normal range refers to `T-CHO` < 250": [
      1298
    ]
  },
  {
    "P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P'": [
      1298
    ]
  },
  {
    "normal level of triglyceride refers to TG < 200": [
      1299
    ]
  },
  {
    "have other symptoms refers to Symptoms is not null": [
      1299
    ]
  },
  {
    "disease name referse to Diagnosis": [
      1300
    ]
  },
  {
    "highest level of triglyceride within the normal range refers to MAX(TG < 200)": [
      1300
    ]
  },
  {
    "no thrombosis refers to Thrombosis = 0": [
      1301
    ]
  },
  {
    "abnormal level of creatinine phosphokinase refers to CPK < 250": [
      1301
    ]
  },
  {
    "positive measure of degree of coagulation refers to KCT = '+' or RVVT = '+' or LAC = '+'": [
      1302
    ]
  },
  {
    "oldest patient refers to MIN(Birthday)": [
      1303
    ]
  },
  {
    "blood glucose is abnormal refers to GLU > 180": [
      1303
    ]
  },
  {
    "normal blood glucose refers to GLU < 180": [
      1304
    ]
  },
  {
    "don't have thrombosis refers to Thrombosis = 0": [
      1304
    ]
  },
  {
    "accepted to the hospital refers to Admission = '+'": [
      1305
    ]
  },
  {
    "normal level of white blood cells refers to WBC between 3.5 and 9.0": [
      1305
    ]
  },
  {
    "normal white blood cell level refers to WBC between 3.5 and 9.0": [
      1306
    ]
  },
  {
    "RBC < = 3.5 or RBC > = 6.0 means the patient has an abnormal level of red blood cell": [
      1307
    ]
  },
  {
    "3.5 < RBC < 6.0 means the patient has a normal level of red blood cell": [
      1307
    ]
  },
  {
    "normal platelet level refers to PLT > 100 and PLT < 400": [
      1308
    ]
  },
  {
    "have other symptoms refers to Diagnosis is not null": [
      1308
    ]
  },
  {
    "PLT > 100 and PLT < 400 means platelet level is within the normal range": [
      1309
    ]
  },
  {
    "PLT < 100 and PLT > 400 means platelet level is not within the normal range": [
      1309
    ]
  },
  {
    "diagnosed with MCTD refers to Diagnosis = 'MCTD'": [
      1309
    ]
  },
  {
    "normal prothrombin time refer to PT < 14": [
      1310
    ]
  },
  {
    "average prothrombin time = AVG(PT)": [
      1310
    ]
  },
  {
    "severe thrombosis refers to Thrombosis = 2 or 1": [
      1311
    ]
  },
  {
    "normal prothrombin time refers to PT < 14": [
      1311
    ]
  },
  {
    "Angela Sanders is the full name": [
      1312
    ]
  },
  {
    "full name refers to first_name, last_name": [
      1312,
      1314,
      1339,
      1346,
      1351,
      1357,
      1358,
      1375,
      1381,
      1383,
      1385,
      1387,
      1388,
      1393,
      1399,
      1411,
      1445,
      1449,
      1456,
      1457
    ]
  },
  {
    "major refers to major_name.": [
      1312
    ]
  },
  {
    "Women's Soccer is an event name": [
      1315,
      1316,
      1317
    ]
  },
  {
    "phone numbers refers to phone": [
      1316,
      1439,
      1461
    ]
  },
  {
    "T-shirt that is in medium size refers to t_shirt_size = 'Medium'": [
      1317
    ]
  },
  {
    "event with highest attendance refers to MAX(COUNT(link_to_event))": [
      1318
    ]
  },
  {
    "Vice President is a position of the Student Club": [
      1319
    ]
  },
  {
    "events attended in 2019 refers to YEAR(event_date) = 2019": [
      1321
    ]
  },
  {
    "meetings events refers to type = 'Meeting'": [
      1322
    ]
  },
  {
    "attended by more than 10 members refers to COUNT(event_id) > 10": [
      1322
    ]
  },
  {
    "name of events refers to event_name": [
      1323,
      1453
    ]
  },
  {
    "attendance of over 20 students COUNT(event_id) > 20.": [
      1323
    ]
  },
  {
    "meetings in 2020 refers to type = 'Meeting' where YEAR(event_date) = 2020": [
      1324
    ]
  },
  {
    "average = DIVIDE(COUNT(event_id), COUNT(DISTINCT event_name))": [
      1324
    ]
  },
  {
    "item in support of club events refers to expense_description": [
      1325
    ]
  },
  {
    "most expensive refers to MAX(cost)": [
      1325
    ]
  },
  {
    "'Environmental Engineering' is the major name": [
      1326
    ]
  },
  {
    "full name of members refers to first_name, last_name": [
      1327
    ]
  },
  {
    "'Laugh Out Loud' is an event name": [
      1327
    ]
  },
  {
    "'Law and Constitutional Studies' is the major name": [
      1328
    ]
  },
  {
    "'Vice President' is a position of Student Club": [
      1331,
      1354
    ]
  },
  {
    "funds received refers to amount.": [
      1331
    ]
  },
  {
    "amount spent refers to spent": [
      1332,
      1335
    ]
  },
  {
    "spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'": [
      1332
    ]
  },
  {
    "'President' is a position of Student Club": [
      1333,
      1356,
      1377
    ]
  },
  {
    "full name of member refers to first_name, last_name": [
      1334
    ]
  },
  {
    "spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'": [
      1335
    ]
  },
  {
    "total budgeted amount refers to SUM(amount) where event_name = 'October Speaker'": [
      1337
    ]
  },
  {
    "event_name = 'October Meeting' where event_date = '2019-10-08'": [
      1338
    ]
  },
  {
    "approved = True means expenses was approved": [
      1338
    ]
  },
  {
    "approved = False means expenses was not approved": [
      1338
    ]
  },
  {
    "Elijah Allen is the full name": [
      1339
    ]
  },
  {
    "The 5th and 6th string of the expense_date in the expense table can refer to month": [
      1339
    ]
  },
  {
    "events in September and October refers to month(expense_date) = 9 OR month(expense_date) = 10": [
      1339
    ]
  },
  {
    "The first 4 strings of the event_date values in the event table can represent year": [
      1340
    ]
  },
  {
    "The difference of the total amount spent = SUBTRACT(spent where YEAR(event_date) = 2019, spent where YEAR(event_date) = 2020)": [
      1340
    ]
  },
  {
    "'Spring Budget Review' is an event name": [
      1341
    ]
  },
  {
    "'Poster' is an event description": [
      1342
    ]
  },
  {
    "on 2019/9/14 refers to event_date = '2019-09-04'": [
      1342
    ]
  },
  {
    "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'": [
      1343
    ]
  },
  {
    "fundraising on 2019/9/14 refers to source = 'Fundraising' where date_received = '2019-09-14'": [
      1344
    ]
  },
  {
    "Carlo Jacobs is the full name": [
      1346
    ]
  },
  {
    "hometown county refers to county": [
      1347
    ]
  },
  {
    "'November Meeting' is an event name": [
      1348
    ]
  },
  {
    "remaining < 0 means the cost had exceeded the budget": [
      1348
    ]
  },
  {
    "'September Speaker' is an event name": [
      1349,
      1401
    ]
  },
  {
    "total number of budget amount refers to SUM(amount)": [
      1349
    ]
  },
  {
    "'Post Cards, Posters' is an expense description": [
      1350
    ]
  },
  {
    "on 2019/8/20 refers to expense_date = '2019-8-20'": [
      1350
    ]
  },
  {
    "status of event refers to event_status": [
      1350
    ]
  },
  {
    "Brent Thomason is the full name": [
      1351
    ]
  },
  {
    "major refers to major_name": [
      1351,
      1396
    ]
  },
  {
    "'Business' is a major name": [
      1352
    ]
  },
  {
    "wear medium size t-shirt refers to t_shirt_size = 'Medium'": [
      1352
    ]
  },
  {
    "hometown state refers to state": [
      1355
    ]
  },
  {
    "Connor Hilton is the full name": [
      1357
    ]
  },
  {
    "date the dues was paid refers to date_received where source = 'Dues'": [
      1357
    ]
  },
  {
    "first paid dues refers to MIN(received_date) where source = 'Dues'": [
      1358
    ]
  },
  {
    "budget in Advertisement refer to category = 'Advertisement' in the budget table": [
      1359
    ]
  },
  {
    "DIVIDE(SUM(amount when event_name = 'Yearly Kickoff'), SUM(amount when event_name = 'October Meeting'))": [
      1359
    ]
  },
  {
    "DIVDE(SUM( amount where category = 'Parking' and event_name = 'November Speaker'), COUNT(event_name = 'November Speaker)) * 100": [
      1360
    ]
  },
  {
    "total cost of the pizzas refers to SUM(cost) where expense_description = 'Pizza'": [
      1361
    ]
  },
  {
    "Orange County is the county name, Virginia is the state name": [
      1362
    ]
  },
  {
    "hometown refers to city, county, state": [
      1364
    ]
  },
  {
    "expense of budget refers to expense_description": [
      1365
    ]
  },
  {
    "lowest remaining refers to MIN(remaining)": [
      1365
    ]
  },
  {
    "'October Meeting' is an event name": [
      1366,
      1404
    ]
  },
  {
    "college most members go refers to MAX(COUNT(major.college))": [
      1367
    ]
  },
  {
    "major in refers to major_name": [
      1368
    ]
  },
  {
    "event refers to event_name": [
      1369,
      1389
    ]
  },
  {
    "highest budget amount refers to MAX(amount)": [
      1369
    ]
  },
  {
    "expense refers to expense_description": [
      1370,
      1444
    ]
  },
  {
    "'Vice President' is a position of the Student Club": [
      1370
    ]
  },
  {
    "'Women's Soccer' is the event name": [
      1371
    ]
  },
  {
    "when the income was received refers to date_received": [
      1372
    ]
  },
  {
    "list all members means to list all the full name": [
      1375
    ]
  },
  {
    "closed events refers to event_name where status = 'Closed'": [
      1376,
      1403
    ]
  },
  {
    "highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))": [
      1376
    ]
  },
  {
    "highest amount of budget spend refers to MAX(spent)": [
      1378
    ]
  },
  {
    "meeting events refers to type = 'Meeting'": [
      1379,
      1454
    ]
  },
  {
    "held in 2020 refers to YEAR(event_date) = 2020": [
      1379
    ]
  },
  {
    "total amount of money spent refers to SUM(spent)": [
      1380
    ]
  },
  {
    "spent for food refers to category = 'Food'": [
      1380
    ]
  },
  {
    "name of students means the full name": [
      1381,
      1383,
      1385,
      1387,
      1388
    ]
  },
  {
    "attended more than 7 events refers to COUNT(link_to_event) > 7": [
      1381
    ]
  },
  {
    "majored in music refers to major_name = 'Interior Design'": [
      1382
    ]
  },
  {
    "'Community Theater' is the event name": [
      1382
    ]
  },
  {
    "Georgetown is a city": [
      1383
    ]
  },
  {
    "South Carolina is a state": [
      1383
    ]
  },
  {
    "income generated refers to income.amount": [
      1384
    ]
  },
  {
    "generate income more than $50 refers to income.amount > 40": [
      1385
    ]
  },
  {
    "'Yearly Kickoff' is an event name": [
      1386,
      1387
    ]
  },
  {
    "total expense refers to SUM(cost)": [
      1386
    ]
  },
  {
    "generate the highest income refers to MAX(income.amount)": [
      1388
    ]
  },
  {
    "lowest cost means MIN(cost)": [
      1389
    ]
  },
  {
    "percentage = DIVIDE(SUM(cost where event_name = 'Yearly Kickoff'), SUM(cost)) * 100": [
      1390
    ]
  },
  {
    "DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics'))": [
      1391
    ]
  },
  {
    "top source funds refers to MAX(source)": [
      1392
    ]
  },
  {
    "September 2019 means date_received BETWEEN '2019-09-01' and '2019-09-30'": [
      1392
    ]
  },
  {
    "'Secretary' is a position of Student Club": [
      1393
    ]
  },
  {
    "'Physics Teaching' is the major_name": [
      1394
    ]
  },
  {
    "event 'Community Theater' in 2019 refers to event_name = 'Community Theater' where YEAR(event_date) = 2019": [
      1395
    ]
  },
  {
    "DIVIDE(SUM(spent), COUNT(spent)) where category = 'Food'": [
      1397
    ]
  },
  {
    "'event in the past' means event_status = 'Closed'": [
      1397
    ]
  },
  {
    "Name of event refers to event_name": [
      1398
    ]
  },
  {
    "highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'": [
      1398
    ]
  },
  {
    "Maya Mclean is the full name": [
      1399
    ]
  },
  {
    "'Women's Soccer' is an event_name": [
      1399
    ]
  },
  {
    "DIVIDE(SUM(type = 'Community Service'), COUNT(event_id)) * 100 where event_date BETWEEN' 2019-01-01' and '2019-12-31'": [
      1400
    ]
  },
  {
    "'Posters' is the expense description": [
      1401
    ]
  },
  {
    "most popular size of t-shirt ordered refers to MAX(COUNT(t_shirt_size))": [
      1402
    ]
  },
  {
    "exceed the budget the most refers to MIN(remaining) where remaining < 0": [
      1403
    ]
  },
  {
    "total value refers to SUM(cost)": [
      1404
    ]
  },
  {
    "'April Speaker' is an event name": [
      1405
    ]
  },
  {
    "amount budgeted refers to SUM(amount)": [
      1405
    ]
  },
  {
    "budget categories refers to category": [
      1405
    ]
  },
  {
    "MAX(amount) where category = 'Food'": [
      1406
    ]
  },
  {
    "MAX(amount) where category = 'Advertisement'": [
      1407
    ]
  },
  {
    "total cost spent for Parking refers to SUM(cost) where expense_description = 'Parking'": [
      1408
    ]
  },
  {
    "total expense refers SUM(cost) where expense_date = '2019-08-20'": [
      1409
    ]
  },
  {
    "full name refers to first_name, last name": [
      1410,
      1460,
      1466
    ]
  },
  {
    "kind of expenses refers to expense_description": [
      1411,
      1412
    ]
  },
  {
    "Sacha Harrison is the full name": [
      1411
    ]
  },
  {
    "t_shirt_size = 'X-Large'": [
      1412,
      1445
    ]
  },
  {
    "incurred less than 50USD refers to cost < 50": [
      1413
    ]
  },
  {
    "name of major refers to major_name": [
      1414,
      1420
    ]
  },
  {
    "'Business' is the major name": [
      1415
    ]
  },
  {
    "members of Economics refers to major_name = 'Business'": [
      1416
    ]
  },
  {
    "t_shirt_size = 'Medium'": [
      1416
    ]
  },
  {
    "remaining budget more than 30 USD refers to remaining > 30": [
      1417
    ]
  },
  {
    "held at MU 215 refers to location = 'MU 215'": [
      1418
    ]
  },
  {
    "taken place in 2020-03-24T12:00:00 refers to event_date = '2020-03-24T12:00:00'": [
      1419
    ]
  },
  {
    "'Vice President' is position of Student Club": [
      1420
    ]
  },
  {
    "DIVIDE(SUM(position = 'Member' and major_name = 'Business'), COUNT(member_id)) * 100": [
      1421
    ]
  },
  {
    "'MU 215' is the location of event": [
      1422
    ]
  },
  {
    "amount of 50 refers to amount = 50": [
      1423
    ]
  },
  {
    "among the members refers to position = 'Member'": [
      1424
    ]
  },
  {
    "extra large t-shirt size refers to t_shirt_size = 'X-Large'": [
      1424
    ]
  },
  {
    "'Environmental Engineering' is the major_name": [
      1426
    ]
  },
  {
    "budget category refers to category": [
      1427
    ]
  },
  {
    "events located at refers to location": [
      1427
    ]
  },
  {
    "type = 'Guest Speaker'": [
      1427
    ]
  },
  {
    "0 budget spent refers to spent = 0": [
      1427
    ]
  },
  {
    "'Electrical and Computer Engineering Department' is the department": [
      1428
    ]
  },
  {
    "members enrolled refers to position = 'Member'": [
      1428
    ]
  },
  {
    "name of social event refers to event_name where type = 'Social'": [
      1429
    ]
  },
  {
    "'Vice President' is position": [
      1429
    ]
  },
  {
    "located at refers to location": [
      1429
    ]
  },
  {
    "bought pizza on 09/10/2019 refers to expense_description = 'Pizza' where expense_date = '2019-09-10'": [
      1430
    ]
  },
  {
    "members of the club refers to position = 'Member'": [
      1431
    ]
  },
  {
    "'Women's Soccer' is event name": [
      1431
    ]
  },
  {
    "t_shirt_size = 'Medium' where position = 'Member'": [
      1432
    ]
  },
  {
    "percentage = DIVIDE(COUNT(amount = 50), COUNT(member_id)) * 100": [
      1432
    ]
  },
  {
    "zip codes that have post office boxes refers to type = 'PO Box'": [
      1433,
      1434
    ]
  },
  {
    "name of events refers event_name": [
      1435
    ]
  },
  {
    "game event that was closed refers to type = 'Game' where status = 'Closed'": [
      1435
    ]
  },
  {
    "event_date BETWEEN '2019-03-15' and '2020-03-20'": [
      1435
    ]
  },
  {
    "have paid more than 50 dollar refers to cost > 50": [
      1436
    ]
  },
  {
    "approved from 1/10/2019 to 11/19/2019 refers to approved = 'true' and expense_date BETWEEN '2019-01-10' and '2019-11-19'": [
      1437
    ]
  },
  {
    "'College of Agriculture and Applied Sciences' is the college": [
      1439
    ]
  },
  {
    "majored in business refers to major_name = 'Business'": [
      1439
    ]
  },
  {
    "expense_date BETWEEN '2019-09-10' and '2019-11-19'": [
      1440
    ]
  },
  {
    "cost > 20": [
      1440
    ]
  },
  {
    "'education' is the major name": [
      1441
    ]
  },
  {
    "'Member' is a position of club": [
      1441
    ]
  },
  {
    "went over budget refers to remaining < 0": [
      1442
    ]
  },
  {
    "percentage = DIVIDE(SUM(remaining < 0), COUNT(event_id)) * 100": [
      1442
    ]
  },
  {
    "event_date BETWEEN '2019-11-01' and '2020-03-31'": [
      1443
    ]
  },
  {
    "spend more than fifty dollars on average refers to DIVIDE( SUM(cost), COUNT(expense_id) ) > 50": [
      1444
    ]
  },
  {
    "DIVIDE(SUM(type = 'PO Box'), COUNT(zip_code)) * 100": [
      1446
    ]
  },
  {
    "name of event refers to event_name": [
      1447,
      1448
    ]
  },
  {
    "underspend its budget refers to remaining > 0": [
      1447
    ]
  },
  {
    "date of event refers to event_date": [
      1448
    ]
  },
  {
    "expenses for pizza refers to expense_description = 'Pizza' where cost > 50 and cost < 100": [
      1448
    ]
  },
  {
    "major of members refers to major_name": [
      1449
    ]
  },
  {
    "spend more than a hundred dollars on an expense refers to cost > 100": [
      1449
    ]
  },
  {
    "more than fifty incomes refers to income > 40": [
      1450
    ]
  },
  {
    "paid the most amount refers to for expense incurred in more than one event refers to MAX(cost where COUNT(event_id) > 1)": [
      1451
    ]
  },
  {
    "position other than a member refers to position ! = 'Member'": [
      1452
    ]
  },
  {
    "average amount paid = DIVIDE( SUM(cost), COUNT(event_id))": [
      1452
    ]
  },
  {
    "less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'": [
      1453
    ]
  },
  {
    "percentage = DIVIDE( SUM(cost), COUNT(event_id)) * 100": [
      1454
    ]
  },
  {
    "budget allowed refers to expense_description": [
      1455
    ]
  },
  {
    "expense_description = 'Water, chips, cookies'": [
      1455
    ]
  },
  {
    "most money refers to MAX(cost)": [
      1455
    ]
  },
  {
    "spend the most money refers to MAX(expense.cost)": [
      1456
    ]
  },
  {
    "contact number refers to phone": [
      1457
    ]
  },
  {
    "had spent more than average on each expense refers to cost > AVG(cost)": [
      1457
    ]
  },
  {
    "SUBTRACT( DIVIDE( SUM(state = 'New Jersey'), COUNT(position = 'Member')), DIVIDE( SUM(state = 'Vermont'), COUNT(position = 'Member')) )": [
      1458
    ]
  },
  {
    "major refers to major name": [
      1459
    ]
  },
  {
    "spent money for refers expense description": [
      1460
    ]
  },
  {
    "expense_description = 'Water, Veggie tray, supplies'": [
      1460
    ]
  },
  {
    "'Elementary Education' is the major name": [
      1461
    ]
  },
  {
    "amount budgeted refers to amount, 'January Speaker' is the event name": [
      1462
    ]
  },
  {
    "budgeted for food refers to category = 'Food'": [
      1463
    ]
  },
  {
    "full name refers to first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received": [
      1464
    ]
  },
  {
    "'Posters' refers to expense description": [
      1465
    ]
  },
  {
    "total amount spent = SUM(spent) where category = 'Speaker Gifts'": [
      1467
    ]
  },
  {
    "hometown refers to city": [
      1468
    ]
  },
  {
    "full name refers to first_name, last_name, hometown of Lincolnton, North Carolina refers to city = 'Lincolnton' AND state = 'North Carolina'": [
      1469
    ]
  },
  {
    "ratio of customers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK').": [
      1471
    ]
  },
  {
    "Year 2012 can be presented as Between 201201 And 201212": [
      1472,
      1476
    ]
  },
  {
    "The first 4 strings of the Date values in the yearmonth table can represent year.": [
      1472,
      1473,
      1479,
      1481
    ]
  },
  {
    "Average Monthly consumption = AVG(Consumption) / 12": [
      1473
    ]
  },
  {
    "Year 2013 can be presented as Between 201301 And 201312": [
      1473,
      1480,
      1481
    ]
  },
  {
    "Year 2011 can be presented as Between 201101 And 201112, which means between January and December in 2011": [
      1474
    ]
  },
  {
    "Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012": [
      1475
    ]
  },
  {
    "The first 4 strings of the Date values in the yearmonth table can represent year": [
      1476,
      1480,
      1482,
      1483,
      1493,
      1498,
      1500,
      1501
    ]
  },
  {
    "Difference in Consumption = CZK customers consumption in 2012 - EUR customers consumption in 2012": [
      1476
    ]
  },
  {
    "The 5th and 6th string of the date can refer to month.": [
      1480,
      1483,
      1493,
      1498,
      1500
    ]
  },
  {
    "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment": [
      1481
    ]
  },
  {
    "Difference in annual average = SME's annual average - LAM's annual average": [
      1481
    ]
  },
  {
    "Difference in annual average = LAM's annual average - KAM's annual average": [
      1481
    ]
  },
  {
    "Increase or Decrease = consumption for 2013 - consumption for 2012": [
      1482
    ]
  },
  {
    "Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%": [
      1482
    ]
  },
  {
    "Between August And November 2013 refers to Between 201308 And 201311": [
      1483
    ]
  },
  {
    "Czech Republic can be represented as the Country value in gasstations table is 'CZE'": [
      1484
    ]
  },
  {
    "Slovakia can be represented as the Country value in the gasstations table is 'SVK'": [
      1484
    ]
  },
  {
    "Computation of more \"discount\" gas stations= Total no. of discount gas stations in Czech Republic - Total no. of discount gas stations in Slovakia": [
      1484
    ]
  },
  {
    "April 2013 refers to 201304 in the yearmonth.date": [
      1485
    ]
  },
  {
    "Amount of more SMEs = Total of SMEs pay using Currency CZK - Total of SMEs pay using Currency EUR": [
      1486
    ]
  },
  {
    "October 2013 refers to 201310 in the yearmonth.date": [
      1487
    ]
  },
  {
    "May 2013 refers to yearmonth.date = 201305": [
      1489
    ]
  },
  {
    "Percentage of LAM customer consumed more than 46.73 = (Total no. of LAM customers who consumed more than 46.73 / Total no. of LAM customers) * 100.": [
      1490
    ]
  },
  {
    "Percentage of KAM uses Euro = (Total of KAM uses Euro / Total of KAM) * 100%.": [
      1492
    ]
  },
  {
    "February 2012 refers to '201202' in yearmonth.date": [
      1493
    ]
  },
  {
    "Percentage of premium gas station = (Total of premium gas station in Slovakia / Total of gas station in Slovakia) * 100%.": [
      1494
    ]
  },
  {
    "September 2013 refers to yearmonth.date = '201309'": [
      1495,
      1496
    ]
  },
  {
    "June 2012 refers to yearmonth.date = '201206'": [
      1497
    ]
  },
  {
    "Monthly consumption = SUM(consumption) / 12": [
      1499
    ]
  },
  {
    "September 2013 refers to 201309": [
      1500
    ]
  },
  {
    "June 2013 refers to '201306'": [
      1501
    ]
  },
  {
    "The 5th and 6th string of the date can refer to month": [
      1501
    ]
  },
  {
    "In January, 2012 means Date contains '2012-01'": [
      1504
    ]
  },
  {
    "Pays in euro = Currency = 'EUR'.": [
      1505
    ]
  },
  {
    "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'": [
      1506,
      1509,
      1521
    ]
  },
  {
    "Gas station in the Czech Republic implies that Country = 'CZE'": [
      1508,
      1510
    ]
  },
  {
    "'2012/8/25' can be represented by '2012-08-25'": [
      1512,
      1513,
      1525
    ]
  },
  {
    "'2012/8/24' can be represented by '2012-08-24'": [
      1514,
      1520,
      1524,
      1526
    ]
  },
  {
    "'2012/8/23' can be represented by '2012-08-23'": [
      1515
    ]
  },
  {
    "'2012/8/26' can be represented by '2012-08-26'": [
      1516,
      1521
    ]
  },
  {
    "The morning refers to the time before '13:00:00'": [
      1516
    ]
  },
  {
    "'2012/8/24 12:42:00' can refer to date = '2012-08-24' AND T1.time = '12:42:00' in the database": [
      1518
    ]
  },
  {
    "'2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database": [
      1519
    ]
  },
  {
    "expense and the consumption has the similar meaning.": [
      1520
    ]
  },
  {
    "during 8:00-9:00 can be represented as Time BETWEEN '08:00:00' AND '09:00:00'": [
      1521
    ]
  },
  {
    "June of 2013 means Date contains '201306' in the yearmonth.date of the database": [
      1522
    ]
  },
  {
    "Consumption decrease rate = (consumption_2012 - consumption_2013) / consumption_2012": [
      1526
    ]
  },
  {
    "January 2012 refers to the Date value = '201201'": [
      1529
    ]
  },
  {
    "Description of products contains full name": [
      1530
    ]
  },
  {
    "average price per single item = Total(price) / Total(amount)": [
      1531
    ]
  },
  {
    "August of 2012 refers to the Date value = '201208'": [
      1533
    ]
  },
  {
    "Price per unit of product = Price / Amount": [
      1533
    ]
  }
]